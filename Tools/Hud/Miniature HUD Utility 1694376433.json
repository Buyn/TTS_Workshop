{
  "SaveName": "Miniature HUD Utility",
  "GameMode": "Base",
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Date": "3/27/2020 8:08:54 PM",
  "Table": "Table_RPG",
  "Sky": "Sky_Museum",
  "Note": "",
  "Rules": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->",
  "LuaScript": "--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]\n\n--[[ The onLoad event is called after the game save finishes loading. --]]\nfunction onLoad()\n    --[[ print('onLoad!') --]]\nend\n\n--[[ The onUpdate event is called once per frame. --]]\nfunction onUpdate()\n    --[[ print('onUpdate loop!') --]]\nend",
  "LuaScriptState": "",
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": false,
    "BothSnapping": false,
    "xSize": 1.0,
    "ySize": 1.0,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 0.54,
    "LightColor": {
      "r": 1.0,
      "g": 1.0,
      "b": 1.0
    },
    "AmbientIntensity": 1.3,
    "AmbientType": 1,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.25,
      "g": 0.25,
      "b": 0.25
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0,
    "LutURL": ""
  },
  "Hands": {
    "Enable": true,
    "DisableUnused": false,
    "Hiding": 0,
    "HandTransforms": []
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "ObjectStates": [
    {
      "Name": "Custom_Model",
      "Transform": {
        "posX": 14.0698872,
        "posY": 0.9912999,
        "posZ": 2.86936116,
        "rotX": -1.03619648E-07,
        "rotY": -0.00251338119,
        "rotZ": -8.867523E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Radiation2",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.1919927,
        "g": 0.701,
        "b": 0.167992681
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/tokens/HexW_MSH.obj",
        "DiffuseURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/games/demo/tokens/radiation.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 5,
        "CastShadows": true
      },
      "XmlUI": "",
      "LuaScript": "TRH_Class = \"token\"\r\n\r\nlocal config = {\r\n    --name: must be unique to your mod.\r\n    --url: url of the asset used on the marker. Consider the design of the image and use this one as an example (white with a black outline seems to work best for contrast's sake)\r\n    --color: valid hex color of the marker\r\n    --stacks: true or false - can the mini receive this marker more than once.\r\n    name=\"Radiation2\", url=\"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/games/demo/status/radiation.png\", color=\"#80ff00\", stacks=false\r\n}\r\n\r\nfunction onCollisionEnter(col)\r\n    config.count = math.max(1, self.getQuantity())\r\n    if ((col.collision_object.getVar(\"TRH_Class\") or \"\") == \"mini\") then\r\n        if (col.collision_object.call(\"addMarker\", config)) then self.destruct() end\r\n    end\r\nend",
      "LuaScriptState": "",
      "GUID": "cbd776"
    },
    {
      "Name": "Custom_Model",
      "Transform": {
        "posX": 13.74858,
        "posY": 0.9912999,
        "posZ": 4.6684413,
        "rotX": -1.309897E-06,
        "rotY": 0.00748919835,
        "rotZ": 2.98854115E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Supercharged Token",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/tokens/ElongHexH_MSH.obj",
        "DiffuseURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/games/demo/tokens/supercharged.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 5,
        "CastShadows": true
      },
      "XmlUI": "",
      "LuaScript": "TRH_Class = \"token\"\r\n\r\nlocal config = {\r\n    --name: must be unique to your mod.\r\n    --url: url of the asset used on the marker. Consider the design of the image and use this one as an example (white with a black outline seems to work best for contrast's sake)\r\n    --color: valid hex color of the marker\r\n    --stacks: true or false - can the mini receive this marker more than once.\r\n    name=\"SuperCharged\", url=\"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/games/demo/status/supercharged.png\", color=\"#ffcc33\", stacks=true\r\n}\r\n\r\nfunction onCollisionEnter(col)\r\n    config.count = math.max(1, self.getQuantity())\r\n    if ((col.collision_object.getVar(\"TRH_Class\") or \"\") == \"mini\") then\r\n        if (col.collision_object.call(\"addMarker\", config)) then self.destruct() end\r\n    end\r\nend",
      "LuaScriptState": "",
      "GUID": "3c0f04"
    },
    {
      "Name": "Custom_Model",
      "Transform": {
        "posX": -12.2594728,
        "posY": 1.08499992,
        "posZ": 5.42499,
        "rotX": 1.67339431E-06,
        "rotY": 359.9777,
        "rotZ": -7.13238762E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "[i]USS Reliant[/i]",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/minis/circle_2in.obj",
        "DiffuseURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/minis/circle_4s4.png",
        "NormalURL": "",
        "ColliderURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/minis/circle_2in_COL.obj",
        "Convex": true,
        "MaterialIndex": 0,
        "TypeIndex": 1,
        "CastShadows": true
      },
      "XmlUI": "",
      "LuaScript": "",
      "LuaScriptState": "",
      "GUID": "e3c4d0"
    },
    {
      "Name": "Custom_Model",
      "Transform": {
        "posX": -8.655324,
        "posY": 1.085,
        "posZ": 3.95280266,
        "rotX": -2.68073762E-07,
        "rotY": 359.977722,
        "rotZ": 4.98923669E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "[i]USS Saratoga[/i]",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/minis/circle_2in.obj",
        "DiffuseURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/minis/circle_4s4.png",
        "NormalURL": "",
        "ColliderURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/minis/circle_2in_COL.obj",
        "Convex": true,
        "MaterialIndex": 0,
        "TypeIndex": 1,
        "CastShadows": true
      },
      "XmlUI": "",
      "LuaScript": "",
      "LuaScriptState": "",
      "GUID": "97679a"
    },
    {
      "Name": "Custom_Model",
      "Transform": {
        "posX": 7.00592,
        "posY": 0.9599999,
        "posZ": 5.24980545,
        "rotX": 3.731565E-08,
        "rotY": 0.00742067955,
        "rotZ": -7.705499E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "MiniHUD Control Panel",
      "Description": "Drop a miniature onto this and click the power button",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/utility/hud_tool.obj",
        "DiffuseURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/utility/hud_tool_controlpanel.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 2,
        "TypeIndex": 4,
        "CustomShader": {
          "SpecularColor": {
            "r": 0.7372549,
            "g": 0.7372549,
            "b": 0.7372549
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "XmlUI": "",
      "CustomUIAssets": [
        {
          "Name": "ui_power",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/power.png"
        },
        {
          "Name": "ui_gear",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/gear.png"
        },
        {
          "Name": "ui_close",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/close.png"
        },
        {
          "Name": "ui_plus",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/plus.png"
        },
        {
          "Name": "ui_minus",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/minus.png"
        },
        {
          "Name": "ui_reload",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/reload.png"
        },
        {
          "Name": "ui_location",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/location.png"
        },
        {
          "Name": "ui_bars_new",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/bars_new.png"
        },
        {
          "Name": "ui_arrow_u",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arrow_u.png"
        },
        {
          "Name": "ui_arrow_d",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arrow_d.png"
        },
        {
          "Name": "ui_arrow_l",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arrow_l.png"
        },
        {
          "Name": "ui_arrow_r",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arrow_r.png"
        }
      ],
      "LuaScript": "--ThatRobHuman MiniHUDController\nTRH_Class = 'mini.controller'\nlocal TRH_Version = '2.0.3'\nlocal TRH_Version_Next = '???'\nlocal TRH_Version_Changes = {}\nlocal TRH_Meta = 'eyJ0eXAiOiJUUkgiLCJhbGciOiJIUzI1NiJ9.eyJjbGFzcyI6Im1pbmkuY29udHJvbGxlciIsInZlcnNpb24iOiIyLjAuMyJ9.ykyVhGNZBI9qLWiIvFmPemhrDrXcrkX6nDX1Wq0KuRo'\nlocal const = { SPECTATOR = 1, PLAYER = 2, PROMOTED = 4, BLACK = 8, HOST = 16, ALL = 31, NOSPECTATOR = 30, OFF = 0, INCREMENTAL = 1, STATIC = 2, BRACKETS = 3, SIMPLEGAUGE = 1, RADIUS = 2, COMPLEXGAUGE = 3, DEFINED = 4, PLASTIC = 0, WOOD = 1, METAL = 2, CARDBOARD = 3, UNKNOWN = 0, UPDATENEEDED = 1, UPTODATE = 2, BADCONNECT = 3}\n\nconfig = {\n    ACCESS = {const.BLACK, const.HOST}, --list who can interact with this thing\n    TURNS = true --use the turn-tracking feature\n}\n\nlocal metaconfig = {\n    UPDATECHECK = true,\n    AUTOUPDATE = false,\n}\n\nlocal needsUpdate = const.UNKNOWN;\nlocal mapG2I = {}\nlocal mapI2G = {}\nlocal assetBuffer = {}\nlocal turn = 1\n\nlocal ui_mode = '0'\n\nfunction ui_setmode(player, value, id)\n    ui_mode = value\n    rebuildUI()\nend\n\nlocal sanitize = function(str)\n    return str:gsub('[<>]', '')\nend\nlocal striptags = function(str)\n    str = sanitize(str)\n    str = str:gsub('%[/?[iI]%]', '')\n    str = str:gsub('%[/?[bB]%]', '')\n    str = str:gsub('%[/?[uU]%]', '')\n    str = str:gsub('%[/?[sS]%]', '')\n    str = str:gsub('%[/?[sS][uU][bB]%]', '')\n    str = str:gsub('%[/?[sS][uU][pP]%]', '')\n    str = str:gsub('%[/?[sS][uU][pP]%]', '')\n    str = str:gsub('%[/?%-%]', '')\n    str = str:gsub('%[/?[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]%]', '')\n    return str\nend\n\nlocal permit = function(player)\n    local rights = bit32.bor(\n    \t(player.host and const.HOST or 0),\n    \t(player.color == 'Black' and const.BLACK or 0),\n    \t((player.color ~= 'Grey' and player.color ~= 'Black') and const.PLAYER or 0),\n    \t(player.promoted and const.PROMOTED or 0),\n    \t(player.color == 'Grey' and const.SPECTATOR or 0)\n    )\n    return bit32.band(bit32.bor(table.unpack(config.ACCESS)), rights) ~= 0\nend\n\nfunction checkForUpdate()\n    WebRequest.put('http://tts.robinomicon.com/version', TRH_Meta, function(res)\n        if (not(res.is_error)) then\n            local response = JSON.decode(res.text)\n            if (response.errors ~= nil) then\n                needsUpdate = const.BADCONNECT\n            elseif (response.result ~= nil) then\n                local result = response.result\n                if (result.update) then\n                    if (metaconfig.AUTOUPDATE or false) then\n                        installUpdate()\n                    elseif (needsUpdate == const.UNKNOWN) then\n                        print('[ffcc33]There is a new version of The MiniHUD Controller available[-] ('..result.current..' -> '..result.new..')')\n                        print('[0088ff]Please be sure to update[-]')\n                    end\n                    needsUpdate = const.NEEDSUPDATE\n                    TRH_Version = result.current\n                    TRH_Version_Next = result.new\n                    TRH_Version_Changes = result.changes or {}\n                else\n                    needsUpdate = const.UPTODATE\n                    TRH_Version = result.current\n                    TRH_Version_Next = result.new\n                    TRH_Version_Changes = {}\n                end\n                if (ui_mode == 'SETTINGS') then\n                    rebuildUI()\n                end\n            else\n                error('something went wrong with JSON parsing')\n                log(res.text)\n            end\n        else\n            error(res)\n        end\n    end)\nend\n\nfunction installUpdate()\n    print('[ffcc33]installing update for miniHUD Controller[-]')\n    WebRequest.put('http://tts.robinomicon.com/minicontroller/build', TRH_Meta, function(res)\n        if (not(res.is_error)) then\n            local status = string.sub(res.text, 1, 5)\n            if (status == '[SCS]') then\n                local result = string.sub(res.text, 15)\n                local sig = '--ThatRobHuman MiniHUDController'\n                if (string.sub(result, 1, string.len(sig)) == sig) then\n                    self.setLuaScript(result)\n                    self.reload()\n                    print('[33ff33]Installation Successful[-]')\n                else\n                    error('bad parsing')\n                end\n            else\n                print(res.text)\n            end\n        else\n            error(res)\n        end\n    end)\nend\n\nfunction ui_system_checkupdate(player)\n    if (permit(player)) then\n        self.UI.setAttribute('meta_update_status', 'color', '#ffcc33')\n        self.UI.setAttribute('meta_update_status', 'text', 'Checking for update...')\n        checkForUpdate()\n    end\nend\n\nfunction ui_system_update(player)\n    if (permit(player)) then\n        installUpdate();\n    end\nend\n\nfunction initiateLink(data)\n    local mini = data.object or getObjectFromGUID(data.guid or error('object or guid is required', 2)) or error('invalid object',2)\n    if ((mini.getVar('TRH_Class') or '') ~= 'mini') then error('invalid mini') end\n    if (trackMini(data)) then\n        mini.call('setController', {guid=self.guid})\n    end\nend\n\nfunction initiateUnlink(data)\n    local mini = data.object or getObjectFromGUID(data.guid or error('object or guid is required', 2)) or error('invalid object',2)\n    if (mini ~= nil) then\n        if (untrackMini(data)) then\n            mini.call('unsetController', {})\n        end\n    end\nend\n\nfunction onObjectDestroy(obj)\n    if (mapG2I[obj.guid] ~= nil) then\n        local index = mapG2I[obj.guid]\n        local tmpG2I = {}\n        local tmpI2G = {}\n        local ni = 1\n        for i,g in pairs(mapI2G) do\n            if (i ~= index) then\n                tmpG2I[g] = ni\n                table.insert(tmpI2G, g)\n                ni = ni + 1\n            end\n        end\n        mapG2I = tmpG2I\n        mapI2G = tmpI2G\n\n        if (config.TURNS and index == turn) then\n            turn = math.max(1, turn - 1);\n        end\n\n        rebuildAssets()\n        if (ui_mode ~= '0') then\n            Wait.frames(rebuildUI, 3)\n        end\n    end\nend\n\nfunction trackMini(data)\n    local mini = data.object or getObjectFromGUID(data.guid or error('object or guid is required', 2)) or error('invalid object',2)\n    if ((mini.getVar('TRH_Class') or '') ~= 'mini') then error('object is not a mini') end\n    if (mapG2I[mini.guid] == nil) then\n        local index = #mapI2G + 1\n        mapG2I[mini.guid] = index\n        mapI2G[index] = mini.guid\n\n        local needsAssetRebuild = false\n        for i,marker in pairs(mini.call('getMarkers', {}) or {}) do\n            if (assetBuffer[marker.url] == nil) then\n                needsAssetRebuild = true\n            end\n        end\n        if (needsAssetRebuild) then\n            rebuildAssets()\n            if (ui_mode ~= '0') then\n                Wait.frames(rebuildUI, 3)\n            end\n        else\n            if (ui_mode ~= '0') then\n                rebuildUI()\n            end\n        end\n    end\n    return true\nend\n\nfunction untrackMini(data)\n    local mini = data.object or getObjectFromGUID(data.guid or error('object or guid is required', 2)) or error('invalid object',2)\n    if (mapG2I[mini.guid] ~= nil) then\n        local index = mapG2I[mini.guid]\n        local tmpG2I = {}\n        local tmpI2G = {}\n        local ni = 1\n        for i,g in pairs(mapI2G) do\n            if (i ~= index) then\n                tmpG2I[g] = ni\n                table.insert(tmpI2G, g)\n                ni = ni + 1\n            end\n        end\n        mapG2I = tmpG2I\n        mapI2G = tmpI2G\n\n        if (config.TURNS and index == turn) then\n            turn = math.max(1, turn - 1);\n        end\n\n        rebuildAssets()\n        if (ui_mode ~= '0') then\n            Wait.frames(rebuildUI, 3)\n        end\n    end\n    return true\nend\n\nfunction verifyLink(data)\n    local mini = data.object or getObjectFromGUID(data.guid or error('object or guid is required', 2)) or error('invalid object',2)\n    return mapG2I[mini.guid] ~= nil\nend\n\nfunction reorderList(guid, newIndex)\n\n    local tmpI2G = {}\n    local tmpG2I = {}\n    local bufferGuid = mapI2G[newIndex]\n    local bufferIndex = mapG2I[guid]\n\n    for i,g in pairs(mapI2G) do\n        if (i == bufferIndex) then\n            tmpI2G[i] = bufferGuid\n            tmpG2I[bufferGuid] = i\n        elseif (i == newIndex) then\n            tmpI2G[i] = guid\n            tmpG2I[guid] = i\n        else\n            tmpI2G[i] = g\n            tmpG2I[g] = i\n        end\n    end\n    mapI2G = tmpI2G\n    mapG2I = tmpG2I\n    if (ui_mode ~= '0') then rebuildUI() end\nend\n\n-- SyncFunctions\nfunction syncBars(data)\n    if (ui_mode ~= '0') then rebuildUI() end\nend\n\nfunction syncBarValues(data)\n    if (ui_mode ~= '0') then\n        local mini = data.object or getObjectFromGUID(data.guid or error('object or guid is required', 2)) or error('invalid object',2)\n        local per = (data.maximum == 0) and 0 or (data.current / data.maximum * 100)\n        local index = data.index\n        self.UI.setAttribute(mini.guid..'_bar_'..index..'_name', 'text', sanitize(data.name))\n        self.UI.setAttribute(mini.guid..'_bar_'..index..'_current', 'text', data.current)\n        self.UI.setAttribute(mini.guid..'_bar_'..index..'_maximum', 'text', data.maximum)\n        self.UI.setAttribute(mini.guid..'_bar_'..index..'_color', 'text', sanitize(data.color))\n        self.UI.setAttribute(mini.guid..'_bar_'..index..'_big', 'isOn', data.big)\n        self.UI.setAttribute(mini.guid..'_bar_'..index..'_bar', 'fillImageColor', sanitize(data.color))\n        self.UI.setAttribute(mini.guid..'_bar_'..index..'_bar', 'percentage', per)\n    end\nend\n\nfunction syncMiniMarkers(data)\n    rebuildAssets()\n    if (ui_mode ~= '0') then\n        Wait.frames(rebuildUI, 3)\n    end\nend\n\nfunction syncAdjMiniMarker(data)\n    if (ui_mode ~= '0') then\n        local display = (data.count or 1) == 1 and '' or data.count\n        self.UI.setAttribute(data.guid..'_marker_'..data.index..'_count', 'text', display)\n    end\nend\n\n--Basics\n\nfunction ui_pingmini(player, guid)\n    if (permit(player)) then\n        local mini = getObjectFromGUID(guid)\n        if (mini ~= nil) then\n            if (player.pingTable ~= nil) then\n                player.pingTable(mini.getPosition())\n            end\n        end\n    end\nend\n\nfunction ui_follow(player)\n    if (permit(player)) then\n        local pos = self.getPosition()\n        for i,hit in pairs( Physics.cast({ origin = {x=pos.x, y=pos.y + 0, z=pos.z}, direction = {x=0, y=1, z=0}, max_distance = 1 })) do\n            if ((hit.hit_object.getVar('TRH_Class') or '') == 'mini') then\n                initiateLink({object=hit.hit_object})\n                break\n            end\n        end\n    end\nend\n\nfunction ui_unfollow(player)\n    if (permit(player)) then\n        local pos = self.getPosition()\n        for i,hit in pairs( Physics.cast({ origin = {x=pos.x, y=pos.y + 0, z=pos.z}, direction = {x=0, y=1, z=0}, max_distance = 1 })) do\n            if ((hit.hit_object.getVar('TRH_Class') or '') == 'mini') then\n                if (mapG2I[hit.hit_object.guid] ~= nil) then\n                    initiateUnlink({object=hit.hit_object})\n                    break\n                end\n            end\n        end\n    end\nend\n\nfunction ui_untrack(player, guid)\n    if (permit(player)) then\n        initiateUnlink({guid=guid})\n    end\nend\n\nfunction ui_reorder(player, params)\n    if (permit(player)) then\n        local args = {}\n        for a in string.gmatch(params, '([^%_]+)') do\n            table.insert(args,a)\n        end\n        local guid = args[1]\n        local newIndex = tonumber(args[2])\n        reorderList(guid, newIndex)\n    end\nend\n\nfunction ui_turn(player, adjust)\n    if (permit(player)) then\n        adjust = (tonumber(adjust) or 1)\n        turn = turn + adjust\n        rebuildUI()\n    end\nend\n\n--Bars\n\nfunction ui_updateminibar(player, value, id)\n    if (permit(player)) then\n        local args = {}\n        for a in string.gmatch(id, '([^%_]+)') do\n            table.insert(args,a)\n        end\n        local guid = args[1]\n        local type = args[2]\n        local index = tonumber(args[3])\n        local key = args[4]\n\n        local mini = getObjectFromGUID(guid)\n        if (mini ~= nil) then\n            if (mapG2I[guid] ~= nil) then\n                if (type == 'bar') then\n                    if (key == 'big') then value = (value == 'True') end\n                    if (key == 'text') then value = (value == 'True') end\n                    toSet = {index=index}\n                    toSet[key] = value\n                    mini.call('editBar', toSet)\n                end\n            end\n        end\n    end\nend\n\nfunction ui_removeminibar(player, value)\n    if (permit(player)) then\n        local args = {}\n        for a in string.gmatch(value, '([^%_]+)') do\n            table.insert(args,a)\n        end\n        local guid = args[1]\n        local index = tonumber(args[2])\n        if (mapG2I[guid] ~= nil) then\n            local mini = getObjectFromGUID(guid)\n            if (mini ~= nil and (mini.getVar('TRH_Class') or '' == 'mini')) then\n                mini.call('removeBar', {index=index})\n            end\n        end\n    end\nend\n\nfunction ui_addminibar(player, guid)\n    if (permit(player)) then\n        if (mapG2I[guid] ~= nil) then\n            local mini = getObjectFromGUID(guid)\n            if (mini ~= nil and (mini.getVar('TRH_Class') or '' == 'mini')) then\n                mini.call('addBar', {})\n            end\n        end\n    end\nend\n\nfunction ui_adjbar(player, params)\n    if (permit(player)) then\n        local args = {}\n        for a in string.gmatch(params, '([^%_]+)') do\n            table.insert(args,a)\n        end\n        local guid = args[1]\n        local index = tonumber(args[2])\n        local amount = tonumber(args[3])\n        if (mapG2I[guid] ~= nil) then\n            local mini = getObjectFromGUID(guid)\n            if (mini ~= nil and (mini.getVar('TRH_Class') or '' == 'mini')) then\n                mini.call('adjustBar', {index=index, amount=amount})\n            end\n        end\n    end\nend\n\n-- Markers\n\nfunction ui_popmarker(player, params)\n    if (permit(player)) then\n        local args = {}\n        for a in string.gmatch(params, '([^%_]+)') do\n            table.insert(args,a)\n        end\n        local guid = args[1]\n        local index = tonumber(args[2])\n        if (mapG2I[guid] ~= nil) then\n            local mini = getObjectFromGUID(guid)\n            if (mini ~= nil and (mini.getVar('TRH_Class') or '' == 'mini')) then\n                mini.call('popMarker', {index=index, amount=1})\n            end\n        end\n    end\nend\n\nfunction rebuildAssets()\n    local root = 'https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/';\n    local assets = {\n        {name='ui_power', url=root..'power.png'},\n        {name='ui_gear', url=root..'gear.png'},\n        {name='ui_close', url=root..'close.png'},\n        {name='ui_plus', url=root..'plus.png'},\n        {name='ui_minus', url=root..'minus.png'},\n        {name='ui_reload', url=root..'reload.png'},\n        {name='ui_location', url=root..'location.png'},\n        {name='ui_bars_new', url=root..'bars_new.png'},\n        {name='ui_arrow_u', url=root..'arrow_u.png'},\n        {name='ui_arrow_d', url=root..'arrow_d.png'},\n        {name='ui_arrow_l', url=root..'arrow_l.png'},\n        {name='ui_arrow_r', url=root..'arrow_r.png'},\n    }\n\n    assetBuffer = {}\n    local bufLen = 0\n    for idx,guid in pairs(mapI2G) do\n        local mini = getObjectFromGUID(guid)\n        if (mini ~= nil) then\n            for i,marker in pairs(mini.call('getMarkers', {})) do\n                if (assetBuffer[marker.url] == nil) then\n                    bufLen = bufLen + 1\n                    assetBuffer[marker.url] = self.guid..'_mk_'..bufLen\n                    table.insert(assets, {name=self.guid..'_mk_'..bufLen, url=marker.url})\n                end\n            end\n        end\n    end\n    self.UI.setCustomAssets(assets)\nend\n\nfunction rebuildUI()\n    local ui = {\n        {tag='Defaults', children={\n            {tag='Text', attributes={color='#cccccc', fontSize='18', alignment='MiddleLeft'}},\n            {tag='InputField', attributes={fontSize='24', preferredHeight='40'}},\n            {tag='ToggleButton', attributes={fontSize='18', preferredHeight='40', colors='#ffcc33|#ffffff|#808080|#606060', selectedBackgroundColor='#dddddd', deselectedBackgroundColor='#999999'}},\n            {tag='Button', attributes={fontSize='18', preferredHeight='40', colors='#dddddd|#ffffff|#808080|#606060'}},\n            {tag='Toggle', attributes={textColor='#cccccc'}},\n        }}\n    }\n    table.insert(ui, {\n        tag='button', attributes={onClick=(ui_mode == '0' and 'ui_setmode(MAIN)' or 'ui_setmode(0)'), image='ui_power', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', width='80', height='80', position='0 -320 -60' }\n    })\n    if (ui_mode == 'MAIN') then\n        local minilist = {\n            tag='VerticalScrollView',\n            attributes={id='scroll', minHeight='800', width='600', inertia=false, scrollSensitivity=4, color='black'},\n            children = {\n                {tag='VerticalLayout', attributes={childForceExpandHeight=false, contentSizeFitter='vertical', spacing='5', padding='5 5 5 5'}, children={}}\n            }\n        }\n        for index,guid in pairs(mapI2G) do\n            local mini = getObjectFromGUID(guid)\n            if (mini ~= nil and (mini.getVar('TRH_Class') or '' == 'mini')) then\n                local bars = mini.call('getBars', {})\n                local markers = mini.call('getMarkers', {})\n                local h = (50 + (#bars * 30) + (math.ceil(#markers/9) * 60))\n                local c = mini.getColorTint()\n                local color = '#'..string.format('%02x', math.ceil(c.r * 255))..string.format('%02x', math.ceil(c.g * 255))..string.format('%02x', math.ceil(c.b * 255))\n\n                local miniui = {\n                    tag='verticallayout', attributes={color='#202020', childForceExpandHeight=false, padding=5, spacing=5, flexibleHeight=0}, children={\n                        {tag='horizontallayout', attributes={preferredHeight = 40, childForceExpandHeight=false, childForceExpandWidth=false, spacing=5}, children={\n                            {tag='verticallayout', attributes={childForceExpandHeight=false, preferredHeight=40, preferredWidth=40, flexibleWidth=0}, children={\n                                {tag='button', attributes={minWidth = '40', preferredWidth='20', flexibleWidth=0, onClick='ui_reorder('..guid..'_'..(index-1)..')', interactable=(index ~= 1), image='ui_arrow_u'}},\n                                {tag='button', attributes={minWidth = '40', preferredWidth='20', flexibleWidth=0, onClick='ui_reorder('..guid..'_'..(index+1)..')', interactable=(index ~= #mapI2G), image='ui_arrow_d'}},\n                            }},\n                            {tag='panel', attributes={color=color, preferredWidth = 10, flexibleWidth = 0, preferredHeight=40, minWidth='10'}},\n                            {tag='text', attributes={alignment='MiddleLeft', preferredHeight=40, fontSize='24', preferredWidth=10000, text=striptags(mini.getName())}},\n                            {tag='button', attributes={minWidth = '40', preferredWidth='40', flexibleWidth=0, onClick='ui_pingmini('..guid..')', image='ui_location'}},\n                            {tag='button', attributes={minWidth = '40', preferredWidth='40', flexibleWidth=0, onClick='ui_addminibar('..guid..')', image='ui_bars_new'}},\n                            {tag='button', attributes={minWidth = '40', preferredWidth='40', flexibleWidth=0, onClick='ui_untrack('..guid..')', image='ui_close'}},\n                        }}\n                    }\n                }\n\n                if ((config.TURNS or false) and index == turn) then\n                    miniui.attributes.color='#303030'\n                    miniui.attributes.outlineSize='3 3'\n                end\n\n                for i,bar in pairs(bars) do\n                    local per = (bar.maximum == 0) and 0 or (bar.current / bar.maximum * 100)\n                    table.insert(miniui.children, {\n                        tag='horizontallayout', attributes={preferredHeight=30, childForceExpandHeight=false, childForceExpandWidth=false, spacing=5}, children={\n                            {tag='InputField', attributes={id=guid..'_bar_'..i..'_name', preferredHeight='30', preferredWidth='160', flexibleWidth=0, fontSize='16', alignment='MiddleRight', text=bar.name, onEndEdit='ui_updateminibar'}},\n                            {tag='InputField', attributes={id=guid..'_bar_'..i..'_current', preferredHeight='30', preferredWidth='80', flexibleWidth=0, fontSize='16', alignment='MiddleCenter', offsetXY='150 0', text=bar.current, onEndEdit='ui_updateminibar'}},\n                            {tag='Button', attributes={preferredWidth='20', preferredHeight='30', flexibleWidth=0, image='ui_arrow_l', onClick='ui_adjbar('..guid..'_'..i..'_-1)'}},\n                            {tag='panel', attributes={preferredHeight='30', preferredWidth='280'}, children={\n                                {tag='progressbar', attributes={id=guid..'_bar_'..i..'_bar', width='100%', percentage=per, fillImageColor=bar.color, color='#00000080', textColor='transparent'}},\n                            }},\n                            {tag='Button', attributes={preferredWidth='20', preferredHeight='30', image='ui_arrow_r', flexibleWidth=0,  onClick='ui_adjbar('..guid..'_'..i..'_1)'}},\n                            {tag='InputField', attributes={id=guid..'_bar_'..i..'_maximum', preferredHeight='30', preferredWidth='80', fontSize='16', text=bar.maximum, onEndEdit='ui_updateminibar'}},\n                            {tag='InputField', attributes={id=guid..'_bar_'..i..'_color', preferredHeight='30', preferredWidth='160', fontSize='16', text=bar.color, onEndEdit='ui_updateminibar'}},\n                            {tag='Toggle', attributes={id=guid..'_bar_'..i..'_big', preferredWidth='30', preferredHeight='30', flexibleWidth=0, isOn=(bar.big), onValueChanged='ui_updateminibar'}},\n                            {tag='Toggle', attributes={id=guid..'_bar_'..i..'_text', preferredWidth='30', preferredHeight='30', flexibleWidth=0, isOn=(bar.text), onValueChanged='ui_updateminibar'}},\n                            {tag='Button', attributes={minWidth='30', preferredHeight='30', image='ui_close', flexibleWidth=0, onClick='ui_removeminibar('..guid..'_'..i..')'}}\n                        }})\n                end\n\n                local minimarkers = {}\n                if (#markers > 0) then\n                    minimarkers = {tag='GridLayout', attributes={cellSize='60 60', spacing='5 5'}, children={}}\n\n                    for i,marker in pairs(markers) do\n                        table.insert(minimarkers.children, {\n                            tag='panel', attributes={width='60', height='60'}, children={\n                                {tag='image', attributes={width='40', height='40', image=assetBuffer[marker.url], color=marker.color, rectAlignment='MiddleCenter'}},\n                                {tag='text', attributes={id=(guid..'_marker_'..i..'_count'), width='20', height='20', rectAlignment='UpperLeft', text=marker.count, outlineColor='black', outlineSize='2 2'}},\n                                {tag='button', attributes={width='20', height='20', image='ui_close', rectAlignment='UpperRight', onClick='ui_popmarker('..guid..'_'..i..')'}},\n                            }\n                        })\n\n                    end\n                    table.insert(miniui.children, minimarkers)\n                end\n                table.insert(minilist.children[1].children, miniui)\n            end\n        end\n\n        local updateMe = {}\n        if (needsUpdate == const.NEEDSUPDATE) then\n            updateMe = {tag='Button', attributes={fontSize='22', text='Update Available', onClick='ui_setmode(SETTINGS)', flexibleWidth=1, colors = '#ffcc33|#ffffff|#808080|#606060'}}\n        end\n        local turnpanel = {}\n        if (config.TURNS) then\n            turnpanel = {tag='VerticalLayout', attributes={childForceExpandWidth=false, flexibleHeight=0, spacing=10, color='black', padding='10'}, children={\n                {tag='Text', attributes={text='Initiative', fontSize='24', }},\n                {tag='HorizontalLayout', attributes={spacing=10}, children={\n                    {tag='Button', attributes={fontSize='22', text='Prev Turn', onClick='ui_turn(-1)', flexibleWidth=1, interactable=(turn > 1)}},\n                    {tag='Button', attributes={fontSize='22', text='Next Turn', onClick='ui_turn(1)', flexibleWidth=1, interactable=(turn < #mapI2G )}},\n                    {tag='Text', attributes={text='Current Turn: '..turn}},\n                }}\n            }}\n        end\n        table.insert(ui, {tag='Panel', attributes={position='0 -400 -60', height='10000', width='800', rectAlignment='UpperCenter'},\n            children={\n                {tag='VerticalLayout', attributes={childForceExpandHeight=false, minHeight='0', spacing=10, rectAlignment='UpperCenter'}, children={\n                    {tag='HorizontalLayout', attributes={preferredHeight=80, childForceExpandWidth=false, flexibleHeight=0, spacing=20, padding='10 10 10 10'}, children={\n                        {tag='Button', attributes={fontSize='22', text='Untrack Mini', onClick='ui_unfollow', flexibleWidth=1}},\n                        {tag='Button', attributes={fontSize='22', text='Track Mini', onClick='ui_follow', flexibleWidth=1}},\n                        updateMe,\n                        {tag='button', attributes={onClick='rebuildUI', image='ui_reload', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', preferredWidth='60', preferredHeight='60', flexibleWidth=0, flexibleHeight=0}},\n                        {tag='button', attributes={onClick='ui_setmode(SETTINGS)', image='ui_gear', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', preferredWidth='60', preferredHeight='60', flexibleWidth=0, flexibleHeight=0}},\n                    }},\n                    turnpanel,\n                    minilist\n                }}\n            }\n        })\n    end\n    if (ui_mode == 'SETTINGS') then\n\n        local updateStatusDisplay = {tag='Text', attributes={id='meta_update_status', text='Update Autocheck is disabled', color='#ff3333'}}\n\n        local changeDisplay = {}\n\n        if (needsUpdate == const.UPTODATE) then\n            updateStatusDisplay = {tag='Text', attributes={id='meta_update_status', text='MiniHUD Controller is up to date', color='#33ccff'}}\n        end\n        if (needsUpdate == const.NEEDSUPDATE) then\n            updateStatusDisplay = {tag='Text', attributes={id='meta_update_status', text='A new version is available', color='#ffcc33'}}\n            local changelog = {{ tag='Text', attributes={fontSize='24', text='Change Log'} }}\n            for i,v in pairs(TRH_Version_Changes) do\n                table.insert(changelog, { tag='Text', attributes={text=string.char(8226)..' '..v} })\n            end\n            changeDisplay = {tag='VerticalLayout', attributes={spacing='5', padding='5 5 5 5', childDorceExpandHeight=false}, children=changelog}\n        end\n        if (needsUpdate == const.BADCONNECT) then\n            updateStatusDisplay = {tag='Text', attributes={id='meta_update_status', text='Error connecting to Robinomicon', color='#ff3333'}}\n        end\n\n        table.insert(ui, {\n            tag='Panel', attributes={position='0 -400 -60', height='10000', width='800', rectAlignment='UpperCenter'}, children={\n                {tag='VerticalLayout', attributes={childForceExpandHeight=false, minHeight='0', spacing=5, rectAlignment='UpperCenter'}, children={\n                    {tag='HorizontalLayout', attributes={preferredHeight=80, flexibleHeight=0, spacing=20, childForceExpandWidth=false, childAlignment='MiddleRight', padding='10 10 10 10'}, children={\n                        {tag='button', attributes={onClick='ui_setmode(MAIN)', image='ui_gear', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', preferredWidth='60', height='80'}}\n                    }},\n                    {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                        {tag='Text', attributes={alignment='UpperMiddle', fontSize='24', text='Updates'}},\n                        {tag='Text', attributes={text='Current Version: '..TRH_Version}},\n                        {tag='Text', attributes={text='Next Version: '..TRH_Version_Next}},\n                        updateStatusDisplay,\n                        {tag='HorizontalLayout', attributes={}, children={\n                            {tag='Button', attributes={onClick='ui_system_checkupdate', text='Check for Update'}},\n                            {tag='Button', attributes={colors='#ffcc33|#ffffff|#808080|#606060', onClick='ui_system_update', text='Update and Restart MiniHUD Controller', interactable = (needsUpdate == const.NEEDSUPDATE)}},\n                        }},\n                        {tag='HorizontalLayout', attributes={childForceExpandWidth=false, spacing=5}, children={\n                            {tag='Button', attributes={preferredWidth='30', preferredHeight='30', flexibleWidth=0, image=(metaconfig.UPDATECHECK and 'ui_checkon' or 'ui_checkoff'), onClick='ui_meta_toggle(UPDATECHECK)', id='tgl_settings_updatecheck'}},\n                            {tag='Text', attributes={preferredWidth='30', flexibleWidth=1, text='Auto-check for Updates'}},\n                            {tag='Button', attributes={preferredWidth='30', preferredHeight='30', flexibleWidth=0, image=(metaconfig.AUTOUPDATE and 'ui_checkon' or 'ui_checkoff'), onClick='ui_meta_toggle(AUTOUPDATE)', id='tgl_settings_autoupdate'}},\n                            {tag='Text', attributes={preferredWidth='30', flexibleWidth=1, text='Automatically Update'}},\n                        }},\n                        changeDisplay\n                    }}\n                }}\n            }\n        })\n    end\n    self.UI.setXmlTable(ui)\nend\n\nfunction onSave()\n    local save = {\n        minis={},\n        turn = turn or 1,\n        metaconfig = metaconfig\n    }\n    for index, guid in pairs(mapI2G) do\n        table.insert(save.minis, guid)\n    end\n    return JSON.encode(save)\nend\n\nfunction verifySpawning(minilist)\n    for i,guid in pairs(minilist or {}) do\n        local m = getObjectFromGUID(guid)\n        if (m ~= nil) then\n            if (m.spawning) then\n                return false\n            end\n        end\n    end\n    return true\nend\n\nfunction loadLinkages(minilist)\n    for _, guid in pairs(minilist or {}) do\n        local mini = getObjectFromGUID(guid)\n        if (mini ~= nil) then\n            if ((mini.getVar('TRH_Class') or '') == 'mini') then\n                if (mini.call('verifyLink', {object=self})) then\n                    mapG2I[guid] = index\n                    mapI2G[index] = guid\n                    index = index + 1\n                else\n                    initiateLink({guid=guid})\n                end\n            end\n        end\n    end\n    Wait.frames(function()\n        rebuildAssets()\n        Wait.frames(rebuildUI, 3)\n    end, 3)\nend\n\nfunction onLoad(save)\n    local data = JSON.decode(save)\n    turn = data.turn or 1\n    metaconfig = data.metaconfig or metaconfig\n    if (metaconfig.UPDATECHECK) then\n        checkForUpdate()\n    end\n\n    mapG2I = {}\n    mapI2G = {}\n\n    local index = 1;\n    Wait.condition(function() loadLinkages(data.minis) end, function() return verifySpawning(data.minis) end)\nend\n\n",
      "LuaScriptState": "{\"metaconfig\":{\"AUTOUPDATE\":false,\"UPDATECHECK\":true},\"minis\":[],\"turn\":1}",
      "GUID": "e894f6",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 0.0,
            "y": 0.25,
            "z": 0.0
          }
        }
      ]
    },
    {
      "Name": "Custom_Model",
      "Transform": {
        "posX": -1.138217,
        "posY": 0.96,
        "posZ": 5.434515,
        "rotX": 5.3159227E-10,
        "rotY": -0.00120707427,
        "rotZ": -1.43487469E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "MiniHUD Injector",
      "Description": "Drop an object onto this to add the miniHUD system to your object. \n\nEdit the config table on this object's script to set default options for miniHUD injection",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/utility/hud_tool.obj",
        "DiffuseURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/utility/hud_tool_injector.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 2,
        "TypeIndex": 4,
        "CustomShader": {
          "SpecularColor": {
            "r": 0.7372549,
            "g": 0.7372549,
            "b": 0.7372549
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "XmlUI": "",
      "CustomUIAssets": [
        {
          "Name": "ui_plus",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/plus.png"
        },
        {
          "Name": "ui_gear",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/gear.png"
        },
        {
          "Name": "ui_power",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/power.png"
        },
        {
          "Name": "ui_close",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/close.png"
        },
        {
          "Name": "ui_minus",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/minus.png"
        },
        {
          "Name": "ui_save",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/save.png"
        },
        {
          "Name": "ui_load",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/load.png"
        },
        {
          "Name": "ui_help_outline",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/help_outline.png"
        },
        {
          "Name": "ui_drop",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/drop.png"
        },
        {
          "Name": "ui_share",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/share.png"
        },
        {
          "Name": "ui_locked",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/locked.png"
        },
        {
          "Name": "ui_unlocked",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/unlocked.png"
        },
        {
          "Name": "ui_checkon",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/checkbox_on.png"
        },
        {
          "Name": "ui_checkoff",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/checkbox_off.png"
        },
        {
          "Name": "arc_round0",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs/round0.png"
        },
        {
          "Name": "arc_round4",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs/round4.png"
        },
        {
          "Name": "arc_round6",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs/round6.png"
        },
        {
          "Name": "arc_round8",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs/round8.png"
        },
        {
          "Name": "arc_round12",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs/round12.png"
        },
        {
          "Name": "arc_hex0",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs/hex0.png"
        },
        {
          "Name": "arc_hex6",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs/hex6.png"
        },
        {
          "Name": "arc_hex12",
          "URL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs/hex12.png"
        }
      ],
      "LuaScript": "--ThatRobHuman MiniHUDInjector\n            TRH_Class = 'mini.injector'\n            local TRH_Version = '3.3.2'\n            local TRH_Version_Next = '???'\n            local TRH_Version_Changes = {}\n            local TRH_Meta = 'eyJ0eXAiOiJUUkgiLCJhbGciOiJIUzI1NiJ9.eyJjbGFzcyI6Im1pbmkuaW5qZWN0b3IiLCJ2ZXJzaW9uIjoiMy4zLjIifQ.kWdYLeTyG6tGCzhTCZwDaD7KaoRXTDzCEcFfA5yX-gA'\n            local const = { SPECTATOR = 1, PLAYER = 2, PROMOTED = 4, BLACK = 8, HOST = 16, ALL = 31, NOSPECTATOR = 30, OFF = 0, INCREMENTAL = 1, STATIC = 2, BRACKETS = 3, SIMPLEGAUGE = 1, RADIUS = 2, COMPLEXGAUGE = 3, DEFINED = 4, PLASTIC = 0, WOOD = 1, METAL = 2, CARDBOARD = 3, UNKNOWN = 0, UPDATENEEDED = 1, UPTODATE = 2, BADCONNECT = 3, SHIELD_FRONTBACK = 1, SHIELD_LEFTRIGHT = 2, SHIELD_FOURWAY = 3, SHIELD_SIXWAY = 4, SHIELD_CAPATLIMIT = 1, SHIELD_WRAPAROUND = 2, SHIELD_IGNORELIMIT = 3}\n\nlocal needsUpdate = const.UNKNOWN;\n\nlocal users = {\n        Grey = 1,\n        Host = 2,\n        Admin = 4,\n        Black = 8,\n        White = 16,\n        Brown = 32,\n        Red = 64,\n        Orange = 128,\n        Yellow = 256,\n        Green = 512,\n        Teal = 1024,\n        Blue = 2048,\n        Purple = 4096,\n        Pink = 8192,\n        Clubs = 16384,\n        Diamonds = 32768,\n        Hearts = 65536,\n        Spades = 131072,\n        Jokers = 262144,\n}\n\nlocal arcshapes = {\n    'round0',\n    'round4',\n    'round6',\n    'round8',\n    'round12',\n    'hex0',\n    'hex6',\n    'hex12',\n}\n\nlocal currentconfig = {\n    REFRESH = 3,\n    UI_SCALE = 1.0,\n    BASE_WIDTH = 1.5,\n    BASE_LENGTH = 1.5,\n    OVERHEAD_HEIGHT = 2,\n    OVERHEAD_OFFSET = 0,\n    OVERHEAD_WIDTH = 3,\n    OVERHEAD_ORIENT = 'VERTICAL',\n    PERMEDIT = 10,\n    PERMVIEW = 524287,\n    MODULE_BARS = true,\n    MODULE_MARKERS = true,\n    MODULE_ARC = false,\n    MODULE_FLAG = false,\n    MODULE_GEOMETRY = false,\n    MODULE_MOVEMENT = false,\n    MODULE_SHIELDS = false,\n    ARCS = {\n        MODE = 1,\n        ZERO = 0,\n        SHAPE = 1,\n        MESH = '',\n        BRACKETS = {},\n        SCALE = 1,\n        COLOR = 'inherit',\n        MAX = 16,\n    },\n    BARS={},\n    FLAG={},\n    LOCK_FLAG = false,\n    LOCK_GEOMETRY = false,\n    GEOMETRY={\n        MESH = '',\n        TEXTURE = '',\n        NORMAL = '',\n        COLOR = 'inherit',\n        MATERIAL = 0,\n    },\n    MOVEMENT = {\n        MODE = 1,\n        UIHEIGHT = 0.25,\n        SPEEDDISTANCE = 1,\n        SPEEDMIN = 0,\n        SPEEDMAX = 4,\n        TURNNOTCH = 22.5,\n        TURNMAX = 3,\n        COLOR = 'inherit',\n        LANDSHOW = true,\n        LANDTEST = false,\n        ORIGIN = 'EDGE',\n        SEGMENTS = {\n            {0,{}},\n        },\n        DEFINITIONS = {\n            {'Standstill','https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/move/standstill.png', 0,0,0,2,0,'#0088ff'},\n        }\n    },\n    SHIELDS = {\n        SHAPE = 1,\n        CURRENT = {6,6,6,6,6,6},\n        MAXIMUM = {6,6,6,6,6,6},\n        MINIMUM = {0,0,0,0,0,0},\n        CRITICAL = {1,1,1,1,1,1},\n        COLOR = '#1f87ff',\n        UIHEIGHT = 0.25,\n        CRITCOLOR = '#da1918',\n        LIMITMODE = 1,\n        AUTOMODE = true,\n    }\n}\nlocal currentpresets = {}\nlocal metaconfig = {\n    UPDATECHECK = true,\n    AUTOUPDATE = false,\n}\n\nconfig = {\n    ACCESS = {const.PLAYER, const.HOST},\n    REFRESH = 6\n}\n\nlocal sectionVis = {\n    presets = false,\n    edit_permissions = false,\n    view_permissions = false,\n    bars = false,\n    markers = false,\n    arcs = false,\n    flag = false,\n    geometry = false,\n    movement = false,\n    shields = false,\n}\n\nlocal permit = function(player)\n    local rights = bit32.bor(\n    \t(player.host and const.HOST or 0),\n    \t(player.color == 'Black' and const.BLACK or 0),\n    \t((player.color ~= 'Grey' and player.color ~= 'Black') and const.PLAYER or 0),\n    \t(player.promoted and const.PROMOTED or 0),\n    \t(player.color == 'Grey' and const.SPECTATOR or 0)\n    )\n    return bit32.band(bit32.bor(table.unpack(config.ACCESS)), rights) ~= 0\nend\n\nlocal clone = function(obj, seen)\n    if type(obj) ~= 'table' then\n        return obj\n    end\n    if seen and seen[obj] then return seen[obj] end\n        local s = seen or {}\n        local res = setmetatable({}, getmetatable(obj))\n        s[obj] = res\n        for k, v in pairs(obj) do\n            res[clone(k, s)] = clone(v, s)\n        end\n    return res\nend\n\nfunction base64_decode(data)\n    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    data = string.gsub(data, '[^'..b..'=]', '')\n    return (data:gsub('.', function(x)\n        if (x == '=') then return '' end\n        local r,f='',(b:find(x)-1)\n        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end\n        return r;\n    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)\n        if (#x ~= 8) then return '' end\n        local c=0\n        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end\n        return string.char(c)\n    end))\nend\n\nfunction extract(obj)\n    local s = obj.getVar('TRH_Save')\n    if (s ~= nil and s ~= '') then\n        currentconfig = JSON.decode(base64_decode(s))\n        rebuildUI()\n    end\nend\n\nfunction ui_extract(player)\n    if (permit(player)) then\n        local pos = self.getPosition()\n        for i,hit in pairs( Physics.cast({ origin = {x=pos.x, y=pos.y + 0, z=pos.z}, direction = {x=0, y=1, z=0}, max_distance = 1 })) do\n            if (hit.hit_object.getVar('TRH_Class') == 'mini') then\n                extract(hit.hit_object)\n                break\n            end\n        end\n    end\nend\n\nfunction installUpdate()\n    print('[ffcc33]installing update for miniHUD Injector[-]')\n    WebRequest.put('http://tts.robinomicon.com/minihud/build', TRH_Meta, function(res)\n        if (not(res.is_error)) then\n            local status = string.sub(res.text, 1, 5)\n            if (status == '[SCS]') then\n                local result = string.sub(res.text, 15)\n                local sig = '--ThatRobHuman MiniHUDInjector'\n                if (string.sub(result, 1, string.len(sig)) == sig) then\n                    self.setLuaScript(result)\n                    self.reload()\n                    print('[33ff33]Installation Successful[-]')\n                else\n                    error('bad parsing')\n                end\n            else\n                print(res.text)\n            end\n        else\n            error(res)\n        end\n    end)\nend\n\nfunction ui_inject(player)\n    if (permit(player)) then\n        local pos = self.getPosition()\n        for i,hit in pairs( Physics.cast({ origin = {x=pos.x, y=pos.y + 0, z=pos.z}, direction = {x=0, y=1, z=0}, max_distance = 1 })) do\n            if (hit.hit_object.getVar('TRH_Class') == nil) then\n                inject(hit.hit_object)\n                break\n            end\n        end\n    end\nend\n\nfunction ui_clearmini(player)\n    if (permit(player)) then\n        local pos = self.getPosition()\n        for i,hit in pairs( Physics.cast({ origin = {x=pos.x, y=pos.y + 0, z=pos.z}, direction = {x=0, y=1, z=0}, max_distance = 1 })) do\n            if ((hit.hit_object.getVar('TRH_Class') or '') == 'mini') then\n                clearmini(hit.hit_object)\n                break\n            end\n        end\n    end\nend\n\nfunction ui_togglelock(player, value, id)\n    if (permit(player)) then\n        local key = 'LOCK_'..value;\n        local c = currentconfig[key];\n        currentconfig[key] = not(c)\n        if (currentconfig[key]) then\n            self.UI.setAttribute(id, 'image', 'ui_locked')\n        else\n            self.UI.setAttribute(id, 'image', 'ui_unlocked')\n        end\n    end\nend\n\nfunction getInjectionState()\n    local toInject = {}\n    if (currentconfig.MODULE_BARS) then\n        toInject.bars = currentconfig.BARS\n    end\n    if (currentconfig.MODULE_FLAG) then\n        toInject.flag = {\n            image = currentconfig.FLAG.IMAGE or '',\n            color = currentconfig.FLAG.COLOR or '#ffffff',\n            width = currentconfig.FLAG.WIDTH or 0,\n            height = currentconfig.FLAG.HEIGHT or 0,\n            automode = currentconfig.FLAG.AUTOMODE or false,\n        }\n    end\n    if (currentconfig.MODULE_GEOMETRY == true) then\n        toInject.geometry = {\n            mesh = currentconfig.GEOMETRY.MESH or '',\n            texture = currentconfig.GEOMETRY.TEXTURE or '',\n            normal = currentconfig.GEOMETRY.NORMAL or '',\n            color = currentconfig.GEOMETRY.COLOR or 'inherit',\n        }\n    end\n    if (currentconfig.MODULE_SHIELDS) then\n        toInject.shields = {}\n        if (currentconfig.SHIELDS.SHAPE == const.SHIELD_FRONTBACK) then\n            toInject.shields.current = {table.unpack(currentconfig.SHIELDS.CURRENT, 1, 2)}\n            toInject.shields.maximum = {table.unpack(currentconfig.SHIELDS.MAXIMUM, 1, 2)}\n            toInject.shields.minimum = {table.unpack(currentconfig.SHIELDS.MINIMUM, 1, 2)}\n            toInject.shields.critical = {table.unpack(currentconfig.SHIELDS.CRITICAL, 1, 2)}\n        end\n        if (currentconfig.SHIELDS.SHAPE == const.SHIELD_LEFTRIGHT) then\n            toInject.shields.current = {table.unpack(currentconfig.SHIELDS.CURRENT, 1, 2)}\n            toInject.shields.maximum = {table.unpack(currentconfig.SHIELDS.MAXIMUM, 1, 2)}\n            toInject.shields.minimum = {table.unpack(currentconfig.SHIELDS.MINIMUM, 1, 2)}\n            toInject.shields.critical = {table.unpack(currentconfig.SHIELDS.CRITICAL, 1, 2)}\n        end\n        if (currentconfig.SHIELDS.SHAPE == const.SHIELD_FOURWAY) then\n            toInject.shields.current = {table.unpack(currentconfig.SHIELDS.CURRENT, 1, 4)}\n            toInject.shields.maximum = {table.unpack(currentconfig.SHIELDS.MAXIMUM, 1, 4)}\n            toInject.shields.minimum = {table.unpack(currentconfig.SHIELDS.MINIMUM, 1, 4)}\n            toInject.shields.critical = {table.unpack(currentconfig.SHIELDS.CRITICAL, 1, 4)}\n        end\n        if (currentconfig.SHIELDS.SHAPE == const.SHIELD_SIXWAY) then\n            toInject.shields.current = {table.unpack(currentconfig.SHIELDS.CURRENT, 1, 6)}\n            toInject.shields.maximum = {table.unpack(currentconfig.SHIELDS.MAXIMUM, 1, 6)}\n            toInject.shields.minimum = {table.unpack(currentconfig.SHIELDS.MINIMUM, 1, 6)}\n            toInject.shields.critical = {table.unpack(currentconfig.SHIELDS.CRITICAL, 1, 6)}\n        end\n        toInject.shields.color = currentconfig.SHIELDS.COLOR\n        toInject.shields.critcolor = currentconfig.SHIELDS.CRITCOLOR\n        toInject.shields.automode = currentconfig.SHIELDS.AUTOMODE or false\n    end\n    return JSON.encode(toInject)\nend\n\nfunction getInjectionConfig()\n    local tmp = {\n        REFRESH = currentconfig.REFRESH,\n        UI_SCALE = currentconfig.UI_SCALE,\n        BASE_LENGTH = currentconfig.BASE_LENGTH,\n        BASE_WIDTH = currentconfig.BASE_WIDTH,\n        OVERHEAD_ORIENT = currentconfig.OVERHEAD_ORIENT,\n        OVERHEAD_OFFSET = currentconfig.OVERHEAD_OFFSET,\n        OVERHEAD_WIDTH = currentconfig.OVERHEAD_WIDTH,\n        OVERHEAD_HEIGHT = currentconfig.OVERHEAD_HEIGHT,\n        MODULE_BARS = currentconfig.MODULE_BARS,\n        MODULE_MARKERS = currentconfig.MODULE_MARKERS,\n        MODULE_ARC = currentconfig.MODULE_ARC,\n        MODULE_FLAG = currentconfig.MODULE_FLAG,\n        MODULE_GEOMETRY = currentconfig.MODULE_GEOMETRY,\n        MODULE_MOVEMENT = currentconfig.MODULE_MOVEMENT,\n        MODULE_SHIELDS = currentconfig.MODULE_SHIELDS,\n    }\n\n    if (currentconfig.MODULE_MOVEMENT == true) then\n        tmp.MOVEMENT = {}\n        tmp.MOVEMENT.MODE = currentconfig.MOVEMENT.MODE\n        tmp.MOVEMENT.UIHEIGHT = currentconfig.MOVEMENT.UIHEIGHT\n        if (currentconfig.MOVEMENT.MODE == const.SIMPLEGAUGE) then\n            tmp.MOVEMENT.LANDSHOW = currentconfig.MOVEMENT.LANDSHOW\n            tmp.MOVEMENT.LANDTEST = currentconfig.MOVEMENT.LANDTEST\n            tmp.MOVEMENT.SPEEDDISTANCE = currentconfig.MOVEMENT.SPEEDDISTANCE\n            tmp.MOVEMENT.SPEEDMAX = currentconfig.MOVEMENT.SPEEDMAX\n            tmp.MOVEMENT.TURNNOTCH = currentconfig.MOVEMENT.TURNNOTCH\n            tmp.MOVEMENT.TURNMAX = currentconfig.MOVEMENT.TURNMAX\n        elseif (currentconfig.MOVEMENT.MODE == const.RADIUS) then\n            tmp.MOVEMENT.SPEEDMIN = currentconfig.MOVEMENT.SPEEDMIN\n            tmp.MOVEMENT.SPEEDMAX = currentconfig.MOVEMENT.SPEEDMAX\n            tmp.MOVEMENT.ORIGIN = currentconfig.MOVEMENT.ORIGIN\n        elseif (currentconfig.MOVEMENT.MODE == const.COMPLEXGAUGE) then\n            tmp.MOVEMENT.LANDSHOW = currentconfig.MOVEMENT.LANDSHOW\n            tmp.MOVEMENT.LANDTEST = currentconfig.MOVEMENT.LANDTEST\n            tmp.MOVEMENT.SEGMENTS = currentconfig.MOVEMENT.SEGMENTS\n        elseif (currentconfig.MOVEMENT.MODE == const.DEFINED) then\n            tmp.MOVEMENT.LANDSHOW = currentconfig.MOVEMENT.LANDSHOW\n            tmp.MOVEMENT.LANDTEST = currentconfig.MOVEMENT.LANDTEST\n            tmp.MOVEMENT.DEFINITIONS = currentconfig.MOVEMENT.DEFINITIONS\n        end\n    end\n    if (currentconfig.MODULE_ARC == true) then\n        tmp.ARCS = {}\n        tmp.ARCS.MODE = currentconfig.ARCS.MODE\n        if (currentconfig.ARCS.MODE == const.INCREMENTAL) then\n            if (currentconfig.ARCS.SHAPE == -1) then\n                tmp.ARCS.MESH = currentconfig.ARCS.MESH\n            else\n                tmp.ARCS.MESH = 'https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/arcs/'..(arcshapes[currentconfig.ARCS.SHAPE])..'.obj'\n            end\n            tmp.ARCS.SCALE = currentconfig.ARCS.SCALE\n            tmp.ARCS.COLOR = currentconfig.ARCS.COLOR\n            tmp.ARCS.MAX = currentconfig.ARCS.MAX\n            tmp.ARCS.ZERO = currentconfig.ARCS.ZERO\n        elseif (currentconfig.ARCS.MODE == const.STATIC) then\n            if (currentconfig.ARCS.SHAPE == -1) then\n                tmp.ARCS.MESH = currentconfig.ARCS.MESH\n            else\n                tmp.ARCS.MESH = 'https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/arcs/'..(arcshapes[currentconfig.ARCS.SHAPE])..'.obj'\n            end\n            tmp.ARCS.SCALE = currentconfig.ARCS.SCALE\n            tmp.ARCS.COLOR = currentconfig.ARCS.COLOR\n        elseif (currentconfig.ARCS.MODE == const.BRACKETS) then\n            if (currentconfig.ARCS.SHAPE == -1) then\n                tmp.ARCS.MESH = currentconfig.ARCS.MESH\n            else\n                tmp.ARCS.MESH = 'https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/components/arcs/'..(arcshapes[currentconfig.ARCS.SHAPE])..'.obj'\n            end\n            tmp.ARCS.SCALE = currentconfig.ARCS.SCALE\n            tmp.ARCS.COLOR = currentconfig.ARCS.COLOR\n            tmp.ARCS.BRACKETS = currentconfig.ARCS.BRACKETS\n            tmp.ARCS.ZERO = currentconfig.ARCS.ZERO\n        end\n    end\n    if (currentconfig.MODULE_FLAG) then\n        tmp.LOCK_FLAG = currentconfig.LOCK_FLAG\n    end\n    if (currentconfig.MODULE_GEOMETRY) then\n        tmp.LOCK_GEOMETRY = currentconfig.LOCK_GEOMETRY\n    end\n    if (currentconfig.MODULE_SHIELDS) then\n        tmp.SHIELDS = {\n            SHAPE = currentconfig.SHIELDS.SHAPE,\n            UIHEIGHT = currentconfig.SHIELDS.UIHEIGHT,\n            LIMITMODE = currentconfig.SHIELDS.LIMITMODE\n        }\n    end\n\n    tmpEdit = {}\n    tmpView = {}\n    for perm,flag in pairs(users) do\n        if (bit32.band(currentconfig.PERMEDIT, flag) ~= 0) then table.insert(tmpEdit, perm) end\n        if (bit32.band(currentconfig.PERMVIEW, flag) ~= 0) then table.insert(tmpView, perm) end\n    end\n    tmp.PERMEDIT = table.concat(tmpEdit, '|')\n    tmp.PERMVIEW = table.concat(tmpView, '|')\n    return tmp\nend\n\nfunction inject(obj)\n    local req = WebRequest.put('http://tts.robinomicon.com/minihud/inject', JSON.encode({inject=getInjectionConfig(), config=currentconfig}), function(res)\n        if (not(res.is_error)) then\n            local status = string.sub(res.text, 1, 5)\n            if (status == '[SCS]') then\n                local result = string.sub(res.text, 15)\n                local sig = '--ThatRobHuman MiniHUD'\n                if (string.sub(result, 1, string.len(sig)) == sig) then\n                    obj.script_state = getInjectionState()\n                    obj.setLuaScript(result)\n                    obj.reload()\n                else\n                    error('bad parsing')\n                end\n            else\n                print(res.text)\n            end\n        else\n            error(res)\n        end\n    end)\nend\n\nfunction clearmini(obj)\n    obj.script_state = ''\n    obj.setLuaScript('')\n    obj.reload()\nend\n\nlocal ui_mode = '0'\n\nfunction ui_setmode(player, value, id)\n    ui_mode = value\n    rebuildUI()\nend\n\nfunction toggle_module(player, value, id)\n    local key = 'MODULE_'..value\n    currentconfig[key] = not(currentconfig[key])\n    if (currentconfig[key]) then\n        self.UI.setAttribute(id, 'image', 'ui_checkon')\n    else\n        self.UI.setAttribute(id, 'image', 'ui_checkoff')\n    end\n\n    rebuildUI()\nend\n\nfunction ui_togglesection(player, section)\n    sectionVis[section] = not(sectionVis[section])\n    rebuildUI()\nend\n\n-- BASICS\n\nfunction ui_editbasic(player, value, id)\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    local key = args[3]\n    if (key == 'basewidth') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.BASE_WIDTH = n end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'baselength') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.BASE_LENGTH = n end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'scale') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.UI_SCALE = n end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'refresh') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.REFRESH = n end\n        self.UI.setAttribute(id, 'text', value)\n    end\nend\n\n-- Permissions\n\nfunction ui_permview_toggle(player, flag, id)\n    currentconfig.PERMVIEW = bit32.bxor(currentconfig.PERMVIEW, flag)\n    self.UI.setAttribute(id, 'isOn', (self.UI.getAttribute(id, 'isOn') == 'true') and 'false' or 'true')\nend\nfunction ui_permview_set(player, value)\n    currentconfig.PERMVIEW = value\n    for lvl,flag in pairs(users) do\n        self.UI.setAttribute('inp_perm_view_'..flag, 'isOn', (bit32.band(flag, value) == 0) and 'false' or 'true')\n    end\nend\nfunction ui_permedit_toggle(player, flag, id)\n    currentconfig.PERMEDIT = bit32.bxor(currentconfig.PERMEDIT, flag)\n    self.UI.setAttribute(id, 'isOn', (self.UI.getAttribute(id, 'isOn') == 'true') and 'false' or 'true')\nend\nfunction ui_permedit_set(player, value)\n    currentconfig.PERMEDIT = value\n    for lvl,flag in pairs(users) do\n        self.UI.setAttribute('inp_perm_edit_'..flag, 'isOn', (bit32.band(flag, value) == 0) and 'false' or 'true')\n    end\nend\n\n--BARS\n\nfunction ui_addbar(player)\n    table.insert(currentconfig.BARS, {'Name', '#ffffff', 5, 10, false, false})\n    rebuildUI()\nend\n\nfunction ui_editbar(player, val, id)\n    if (permit(player)) then\n        local args = {}\n        for a in string.gmatch(id, '([^%_]+)') do\n            table.insert(args,a)\n        end\n        local index = tonumber(args[3])\n        local key = args[4]\n        if (key == 'name') then\n            currentconfig.BARS[index][1] = val\n            self.UI.setAttribute(id, 'text', val)\n        elseif (key == 'color') then\n            currentconfig.BARS[index][2] = val\n            self.UI.setAttribute(id, 'text', val)\n        elseif (key == 'current') then\n            local n = tonumber(val)\n            if (n ~= nil) then\n                n = math.min(n, currentconfig.BARS[index][4])\n                currentconfig.BARS[index][3] = n\n                self.UI.setAttribute(id, 'text', n)\n            else\n                self.UI.setAttribute(id, 'text', val)\n            end\n        elseif (key == 'maximum') then\n            local n = tonumber(val)\n            if (n ~= nil) then\n                currentconfig.BARS[index][4] = n\n                if (currentconfig.BARS[index][3] > n) then\n                    currentconfig.BARS[index][3] = n\n                    self.UI.setAttribute('inp_bar_'..index..'_current', 'text', n)\n                end\n                self.UI.setAttribute(id, 'text', n)\n            else\n                self.UI.setAttribute(id, 'text', val)\n            end\n        elseif (key == 'text') then\n            currentconfig.BARS[index][5] = not(currentconfig.BARS[index][5])\n            if (currentconfig.BARS[index][5]) then\n                self.UI.setAttribute(id, 'image', 'ui_checkon')\n            else\n                self.UI.setAttribute(id, 'image', 'ui_checkoff')\n            end\n        elseif (key == 'big') then\n            currentconfig.BARS[index][6] = not(currentconfig.BARS[index][6])\n            if (currentconfig.BARS[index][6]) then\n                self.UI.setAttribute(id, 'image', 'ui_checkon')\n            else\n                self.UI.setAttribute(id, 'image', 'ui_checkoff')\n            end\n        end\n    end\nend\n\nfunction ui_rembar(player, index)\n    index = tonumber(index) or error('invalid index')\n    local tmp = {}\n    for i,bar in pairs(currentconfig.BARS) do\n        if (i ~= index) then\n            table.insert(tmp, bar)\n        end\n    end\n    currentconfig.BARS = tmp\n    rebuildUI()\nend\n\n--ARCS\n\nfunction ui_arcmode(player, val)\n    currentconfig.ARCS.MODE = tonumber(val) or 0\n    rebuildUI()\nend\n\nfunction ui_editarc(player, value, id)\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    if (args[3] == 'scale') then\n        value = tonumber(value)\n        currentconfig.ARCS.SCALE = value\n    end\n    if (args[3] == 'color') then\n        currentconfig.ARCS.COLOR = value\n    end\n    if (args[3] == 'mesh') then\n        currentconfig.ARCS.MESH = value\n    end\n    if (args[3] == 'max') then\n        value = tonumber(value)\n        currentconfig.ARCS.MAX = value\n    end\n    if (args[3] == 'zero') then\n        value = tonumber(value)\n        currentconfig.ARCS.ZERO = value\n    end\n    self.UI.setAttribute(id, 'text', value)\nend\n\nfunction ui_editarc_shape(player, value, id)\n    value = tonumber(value)\n    if (value == -1) then\n        self.UI.show('cnt_arc_mesh')\n        self.UI.setAttribute('inp_arc_shape_-1', 'isOn', true)\n    else\n        self.UI.hide('cnt_arc_mesh')\n        self.UI.setAttribute('inp_arc_shape_-1', 'isOn', false)\n    end\n    for i,shape in pairs(arcshapes) do\n        self.UI.setAttribute('inp_arc_shape_'..i, 'isOn', i == value)\n    end\n    currentconfig.ARCS.SHAPE = value\nend\n\nfunction ui_addarcbracket(player)\n    table.insert(currentconfig.ARCS.BRACKETS, 5)\n    rebuildUI()\nend\n\nfunction ui_editarcbracket(player, value, id)\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    local index = tonumber(args[3])\n    currentconfig.ARCS.BRACKETS[index] = value\n    self.UI.setAttribute(id, 'text', value)\nend\n\nfunction ui_remarcbracket(player)\n    tmp = {}\n    for i,v in pairs(currentconfig.ARCS.BRACKETS) do\n        if (i ~= #currentconfig.ARCS.BRACKETS) then\n            tmp[i] = v\n        end\n    end\n    currentconfig.ARCS.BRACKETS = tmp\n    rebuildUI()\nend\n\nfunction ui_arc_setcolor(player, value, id)\n    ui_editarc(player, value, 'inp_arc_color');\nend\n\n--FLAG\n\nfunction ui_editflag(player, val, id)\n    if (permit(player)) then\n        local args = {}\n        for a in string.gmatch(id, '([^%_]+)') do\n            table.insert(args,a)\n        end\n        local key = args[3]\n        if (key == 'image') then\n            currentconfig.FLAG.IMAGE = val\n            self.UI.setAttribute(id, 'text', val)\n        elseif (key == 'color') then\n            currentconfig.FLAG.COLOR = val\n            self.UI.setAttribute(id, 'text', val)\n        elseif (key == 'width') then\n            local n = tonumber(val)\n            if (n ~= nil) then\n                currentconfig.FLAG.WIDTH = n\n                self.UI.setAttribute(id, 'text', n)\n            else\n                self.UI.setAttribute(id, 'text', val)\n            end\n        elseif (key == 'height') then\n            local n = tonumber(val)\n            if (n ~= nil) then\n                currentconfig.FLAG.HEIGHT = n\n                self.UI.setAttribute(id, 'text', n)\n            else\n                self.UI.setAttribute(id, 'text', val)\n            end\n        elseif (key == 'automode') then\n            currentconfig.FLAG.AUTOMODE = not(currentconfig.FLAG.AUTOMODE)\n            if (currentconfig.FLAG.AUTOMODE) then\n                self.UI.setAttribute(id, 'image', 'ui_checkon')\n            else\n                self.UI.setAttribute(id, 'image', 'ui_checkoff')\n            end\n        end\n    end\nend\n\n--Geometry\n\nfunction ui_flag_setcolor(player, val, id)\n    ui_editflag(player, val, 'inp_flag_color')\nend\n\nfunction ui_editgeometry(player, val, id)\n    if (permit(player)) then\n        local args = {}\n        for a in string.gmatch(id, '([^%_]+)') do\n            table.insert(args,a)\n        end\n        local key = args[3]\n        if (key == 'mesh') then\n            currentconfig.GEOMETRY.MESH = val\n            self.UI.setAttribute(id, 'text', val)\n        elseif (key == 'color') then\n            currentconfig.GEOMETRY.COLOR = val\n            self.UI.setAttribute(id, 'text', val)\n        elseif (key == 'texture') then\n            currentconfig.GEOMETRY.TEXTURE = val\n            self.UI.setAttribute(id, 'text', val)\n        elseif (key == 'normal') then\n            currentconfig.GEOMETRY.NORMAL = val\n            self.UI.setAttribute(id, 'text', val)\n        elseif (key == 'material') then\n            local n = tonumber(val)\n            currentconfig.GEOMETRY.MATERIAL = n\n            self.UI.setAttribute('inp_geometry_material_0', 'isOn', n == 0)\n            self.UI.setAttribute('inp_geometry_material_1', 'isOn', n == 1)\n            self.UI.setAttribute('inp_geometry_material_2', 'isOn', n == 2)\n            self.UI.setAttribute('inp_geometry_material_3', 'isOn', n == 3)\n        end\n    end\nend\n\nfunction ui_geometry_setcolor(player, value, id)\n    ui_editgeometry(player, value, 'inp_geometry_color');\nend\n\n--BASICS\n\nfunction ui_editoverhead(player, value, id)\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    local key = args[3]\n    if (key == 'height') then\n        currentconfig.OVERHEAD_HEIGHT = tonumber(value) or 1\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'offset') then\n        currentconfig.OVERHEAD_OFFSET = tonumber(value) or 0\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'width') then\n        currentconfig.OVERHEAD_WIDTH = tonumber(value) or 2\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'orient') then\n        local dir = string.upper(args[4])\n        currentconfig.OVERHEAD_ORIENT = dir or 'VERTICAL'\n        if (dir == 'VERTICAL') then\n            self.UI.setAttribute('inp_overhead_orient_horizontal', 'isOn', false)\n            self.UI.setAttribute('inp_overhead_orient_vertical', 'isOn', true)\n        else\n            self.UI.setAttribute('inp_overhead_orient_horizontal', 'isOn', true)\n            self.UI.setAttribute('inp_overhead_orient_vertical', 'isOn', false)\n        end\n    end\nend\n\n\nfunction ui_setuiscale(player, value, id)\n    currentconfig.UI_SCALE = tonumber(value) or 1\n    self.UI.setAttribute(id, 'text', value)\nend\n\nfunction ui_setdelay(player, value, id)\n    currentconfig.REFRESH = tonumber(value)\n    self.UI.setAttribute(id, 'text', value)\nend\n\n--PRESETS\n\nfunction ui_presetadd(player)\n    table.insert(currentpresets, {\n        name='',\n        config=clone(currentconfig)\n    })\n    rebuildUI()\nend\n\nfunction ui_presetrename(player, value, id)\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    local index = args[3]\n    currentpresets[tonumber(index)].name = value\n    self.UI.setAttribute(id, 'text', value)\nend\n\nfunction ui_presetsave(player, index)\n    local i = tonumber(index)\n    currentpresets[i].config = clone(currentconfig)\nend\n\nfunction ui_presetload(player, index)\n    local i = tonumber(index)\n    currentconfig = clone(currentpresets[i].config)\n    rebuildUI()\nend\n\nfunction ui_presetdelete(player, index)\n    local tmp = {}\n    local theIndex = tonumber(index)\n    for i,preset in pairs(currentpresets) do\n        if (i ~= theIndex) then\n            table.insert(tmp, preset)\n        end\n    end\n    currentpresets = tmp\n    rebuildUI()\nend\n\n--SHIELDS\n\nfunction ui_shieldsshape(player, val)\n    currentconfig.SHIELDS.SHAPE = tonumber(val) or 0\n    rebuildUI()\nend\n\nfunction ui_shieldslimitmode(player, val)\n    currentconfig.SHIELDS.LIMITMODE = tonumber(val) or 0\n    rebuildUI()\nend\n\nfunction ui_shields_setcolor(player, value, id)\n    ui_editshields(player, value, 'inp_shields_color')\nend\n\nfunction ui_shields_setcritcolor(player, value, id)\n    ui_editshields(player, value, 'inp_shields_critcolor')\nend\n\nfunction ui_editshields(player, value, id)\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    local key = args[3]\n    if (key == 'current' or key == 'maximum' or key == 'critical' or key == 'minimum') then\n        local index = tonumber(args[4]) or error('index is required when modifying current, minimum, maximum, or critical')\n        local n = tonumber(value)\n        if (n ~= nil) then\n            currentconfig.SHIELDS[string.upper(key)][index] = n\n            self.UI.setAttribute(id, 'text', n)\n        else\n            self.UI.setAttribute(id, 'text', value)\n        end\n    end\n    if (key == 'color') then\n        currentconfig.SHIELDS.COLOR = value\n        self.UI.setAttribute(id, 'text', value)\n    end\n    if (key == 'uiheight') then\n        local n = tonumber(value)\n        if (n ~= nil) then\n            currentconfig.SHIELDS.UIHEIGHT = n\n            self.UI.setAttribute(id, 'text', n)\n        else\n            self.UI.setAttribute(id, 'text', value)\n        end\n    end\n    if (key == 'critcolor') then\n        currentconfig.SHIELDS.CRITCOLOR = value\n        self.UI.setAttribute(id, 'text', value)\n    end\n    if (key == 'automode') then\n        currentconfig.SHIELDS.AUTOMODE = not(currentconfig.SHIELDS.AUTOMODE)\n        if (currentconfig.SHIELDS.AUTOMODE) then\n            self.UI.setAttribute(id, 'image', 'ui_checkon')\n        else\n            self.UI.setAttribute(id, 'image', 'ui_checkoff')\n        end\n    end\nend\n\n\n--MOVEMENT\n\nfunction ui_movemode(player, val)\n    currentconfig.MOVEMENT.MODE = tonumber(val) or 0\n    rebuildUI()\nend\n\nfunction ui_editmovement(player, value, id)\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    local key = args[3]\n    if (key == 'uioffset') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.MOVEMENT.UIOFFSET = n end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'landshow') then\n        local n = value == 'True'\n        currentconfig.MOVEMENT.LANDSHOW = n\n        self.UI.setAttribute(id, 'isOn', n)\n    elseif (key == 'landtest') then\n        local n = value == 'True'\n        currentconfig.MOVEMENT.LANDTEST = n\n        self.UI.setAttribute(id, 'isOn', n)\n    elseif (key == 'speeddistance') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.MOVEMENT.SPEEDDISTANCE = n end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'speedmin') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.MOVEMENT.SPEEDMIN = n end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'speedmax') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.MOVEMENT.SPEEDMAX = n end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'turnnotch') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.MOVEMENT.TURNNOTCH = n end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'turnmax') then\n        local n = tonumber(value)\n        if (n ~= nil) then currentconfig.MOVEMENT.TURNMAX = n end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'color') then\n        currentconfig.MOVEMENT.COLOR = value\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'origin') then\n        local dir = string.upper(args[4])\n        currentconfig.MOVEMENT.ORIGIN = dir or 'CENTER'\n        if (dir == 'CENTER') then\n            self.UI.setAttribute('inp_move_origin_edge', 'isOn', false)\n            self.UI.setAttribute('inp_move_origin_center', 'isOn', true)\n        else\n            self.UI.setAttribute('inp_move_origin_edge', 'isOn', true)\n            self.UI.setAttribute('inp_move_origin_center', 'isOn', false)\n        end\n    end\nend\n\nfunction ui_movement_setcolor(player, value, id)\n    ui_editmovement(player, value, 'inp_move_color')\nend\n\nfunction ui_movesegments_editsegment(player, value, id)\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    local key = args[3]\n    if (key == 'distance') then\n        local index = tonumber(args[4])\n        local n = tonumber(value)\n        if (n ~= nil) then\n            currentconfig.MOVEMENT.SEGMENTS[index][1] = n\n        end\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'remsegment') then\n        local index = tonumber(args[4])\n        local tmp = {}\n        for i,v in pairs(currentconfig.MOVEMENT.SEGMENTS) do\n            if (index ~= i) then\n                table.insert(tmp, v)\n            end\n        end\n        currentconfig.MOVEMENT.SEGMENTS = tmp\n        rebuildUI()\n    elseif (key == 'addsegment') then\n        local max = currentconfig.MOVEMENT.SEGMENTS[#currentconfig.MOVEMENT.SEGMENTS][1]\n        table.insert(currentconfig.MOVEMENT.SEGMENTS, {\n            max+1,{}\n        })\n        rebuildUI()\n    end\n\n\nend\n\n\n\nfunction ui_movesegments_editnotch(player, value, id)\n\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    local key = args[3]\n    if (key == 'addnotch') then\n        local index = tonumber(args[4])\n        table.insert(currentconfig.MOVEMENT.SEGMENTS[index][2], 0)\n        rebuildUI()\n    elseif (key == 'remnotch') then\n        local index = tonumber(args[4])\n        local tmp = {}\n        local cnt = #currentconfig.MOVEMENT.SEGMENTS[index][2]\n        for i,v in pairs(currentconfig.MOVEMENT.SEGMENTS[index][2]) do\n            if (i ~= cnt) then\n                table.insert(tmp, v)\n            end\n        end\n        currentconfig.MOVEMENT.SEGMENTS[index][2] = tmp\n        rebuildUI()\n    elseif (key == 'editnotch') then\n        local index = tonumber(args[4])\n        local notch = tonumber(args[5])\n        local n = tonumber(value)\n        if (n ~= nil) then\n            currentconfig.MOVEMENT.SEGMENTS[index][2][notch] = n\n        end\n        self.UI.setAttribute(id, 'text', value)\n    end\nend\n\nfunction ui_movedefinitions(player, value, id)\n    local args = {}\n    for a in string.gmatch(id, '([^%_]+)') do\n        table.insert(args,a)\n    end\n    local key = args[3]\n    if (key == 'name') then\n        local index = tonumber(args[4])\n        currentconfig.MOVEMENT.DEFINITIONS[index][1] = value\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'url') then\n        local index = tonumber(args[4])\n        currentconfig.MOVEMENT.DEFINITIONS[index][2] = value\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'iconx') then\n        local index = tonumber(args[4])\n        currentconfig.MOVEMENT.DEFINITIONS[index][3] = tonumber(value) or 0\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'icony') then\n        local index = tonumber(args[4])\n        currentconfig.MOVEMENT.DEFINITIONS[index][4] = tonumber(value) or 0\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'posx') then\n        local index = tonumber(args[4])\n        currentconfig.MOVEMENT.DEFINITIONS[index][5] = tonumber(value) or 0\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'posy') then\n        local index = tonumber(args[4])\n        currentconfig.MOVEMENT.DEFINITIONS[index][6] = tonumber(value) or 0\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'rot') then\n        local index = tonumber(args[4])\n        currentconfig.MOVEMENT.DEFINITIONS[index][7] = tonumber(value) or 0\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'color') then\n        local index = tonumber(args[4])\n        currentconfig.MOVEMENT.DEFINITIONS[index][8] = value\n        self.UI.setAttribute(id, 'text', value)\n    elseif (key == 'adddef') then\n        table.insert(currentconfig.MOVEMENT.DEFINITIONS, { '','',0,0,0,0,0,'#ffffff' })\n        rebuildUI()\n    elseif (key == 'remdef') then\n        local index = tonumber(args[4])\n        local tmp = {}\n        for i,v in pairs(currentconfig.MOVEMENT.DEFINITIONS) do\n            if (i ~= index) then\n                table.insert(tmp, v)\n            end\n        end\n        currentconfig.MOVEMENT.DEFINITIONS = tmp\n        rebuildUI()\n    end\nend\n\n\n\nfunction ui_meta_toggle(player, value, id)\n    local n = metaconfig[value]\n    metaconfig[value] = not(n)\n    if (metaconfig[value]) then\n        self.UI.setAttribute(id, 'image', 'ui_checkon')\n    else\n        self.UI.setAttribute(id, 'image', 'ui_checkoff')\n    end\nend\n\nfunction ui_system_checkupdate(player)\n    if (permit(player)) then\n        self.UI.setAttribute('meta_update_status', 'color', '#ffcc33')\n        self.UI.setAttribute('meta_update_status', 'text', 'Checking for update...')\n        checkForUpdate()\n    end\nend\n\nfunction ui_system_update(player)\n    if (permit(player)) then\n        installUpdate();\n    end\nend\n\nfunction rebuildUI()\n    local ui = {\n        {tag='Defaults', children={\n            {tag='Text', attributes={color='#cccccc', fontSize='18', alignment='MiddleLeft'}},\n            {tag='InputField', attributes={fontSize='24', preferredHeight='40'}},\n            {tag='ToggleButton', attributes={fontSize='18', preferredHeight='40', colors='#ffcc33|#ffffff|#808080|#606060', selectedBackgroundColor='#dddddd', deselectedBackgroundColor='#999999'}},\n            {tag='Button', attributes={fontSize='18', preferredHeight='40', colors='#dddddd|#ffffff|#808080|#606060'}},\n            {tag='Toggle', attributes={textColor='#cccccc'}},\n        }}\n    }\n    table.insert(ui, {\n        tag='button', attributes={onClick=(ui_mode == '0' and 'ui_setmode(MAIN)' or 'ui_setmode(0)'), image='ui_power', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', width='80', height='80', position='0 -320 -60' }\n    })\n    if (ui_mode == 'MAIN') then\n\n        local basePanel = {tag='HorizontalLayout', attributes={spacing='5', flexibleHeight=0}, children={\n\n            {tag='VerticalLayout', attributes={color='black', padding='5 5 5 5', spacing='5', flexibleWidth=0, childForceExpandHeight=false, preferredWidth=10}, children={\n                {tag='Text', attributes={text='Base Width'}},\n                {tag='InputField', attributes={id='inp_basic_basewidth', text=currentconfig.BASE_WIDTH, onEndEdit='ui_editbasic', characterValidation='Decimal'}},\n                {tag='Text', attributes={text='Base Length'}},\n                {tag='InputField', attributes={id='inp_basic_baselength', text=currentconfig.BASE_LENGTH, onEndEdit='ui_editbasic', characterValidation='Decimal'}},\n            }},\n\n            {tag='VerticalLayout', attributes={color='black', padding='5 5 5 5', spacing='5', flexibleWidth=0, childForceExpandHeight=false, preferredWidth=10}, children={\n                {tag='Text', attributes={text='Scale Factor'}},\n                {tag='InputField', attributes={id='inp_basic_scale', text=currentconfig.UI_SCALE, onEndEdit='ui_editbasic', characterValidation='Decimal'}},\n                {tag='Text', attributes={text='Refresh Delay'}},\n                {tag='InputField', attributes={id='inp_basic_refresh', text=currentconfig.REFRESH, onEndEdit='ui_editbasic', characterValidation='Integer'}},\n            }},\n\n            {tag='VerticalLayout', attributes={color='black', padding='5 5 5 5', spacing='5', flexibleWidth=0, childForceExpandHeight=false, preferredWidth=10}, children={\n                {tag='Text', attributes={text='Vertical Offset'}},\n                {tag='InputField', attributes={id='inp_overhead_height', text=currentconfig.OVERHEAD_HEIGHT, onEndEdit='ui_editoverhead', characterValidation='Decimal'}},\n                {tag='Text', attributes={text='Back/Front Offset'}},\n                {tag='InputField', attributes={id='inp_overhead_offset', text=currentconfig.OVERHEAD_OFFSET, onEndEdit='ui_editoverhead', characterValidation='Decimal'}},\n            }},\n\n            {tag='VerticalLayout', attributes={color='black', padding='5 5 5 5', spacing='5', flexibleWidth=0, childForceExpandHeight=false, preferredWidth=10}, children={\n                {tag='Text', attributes={text='Overhead Width'}},\n                {tag='InputField', attributes={id='inp_overhead_width', text=currentconfig.OVERHEAD_WIDTH, onEndEdit='ui_editoverhead', characterValidation='Decimal'}},\n\n                {tag='Text', attributes={text='Orientation'}},\n                {tag='HorizontalLayout', attributes={}, children={\n                    {tag='ToggleButton', attributes={id='inp_overhead_orient_horizontal', onClick='ui_editoverhead(HORIZONTAL)', text='Horizontal', isOn=(currentconfig.OVERHEAD_ORIENT == 'HORIZONTAL')}},\n                    {tag='ToggleButton', attributes={id='inp_overhead_orient_vertical', onClick='ui_editoverhead(VERTICAL)', text='Vertical', isOn=(currentconfig.OVERHEAD_ORIENT == 'VERTICAL')}},\n                }}\n            }},\n\n\n        }}\n\n        local presetPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='Text', attributes={alignment='UpperMiddle', fontSize='24', text='Presets', onClick='ui_togglesection(presets)'}},\n        }}\n        if (sectionVis.presets) then\n            local list = {}\n            for i,preset in pairs(currentpresets) do\n                table.insert(list, {tag='HorizontalLayout', attributes={spacing = '5', height='40', childForceExpandWidth=false, }, children={\n                    {tag='InputField', attributes={onEndEdit='ui_presetrename', flexibleWidth=1, id='inp_preset_'..i..'_name', text=preset.name, preferredWidth='500'}},\n                    {tag='Button', attributes={onClick='ui_presetsave('..i..')', flexibleWidth=0, preferredWidth='40', image='ui_save'}},\n                    {tag='Button', attributes={onClick='ui_presetload('..i..')', flexibleWidth=0, preferredWidth='40', image='ui_load'}},\n                    {tag='Button', attributes={onClick='ui_presetdelete('..i..')', flexibleWidth=0, preferredWidth='40', image='ui_close'}},\n                }})\n            end\n            presetPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='Text', attributes={alignment='UpperMiddle', fontSize='24', text='Presets', onClick='ui_togglesection(presets)'}},\n                {tag='VerticalLayout', attributes={}, children=list},\n                {tag='HorizontalLayout', attributes={childForceExpandWidth='false', childAlignment='MiddleRight'}, children={\n                    {tag='Button', attributes={text='Add Preset', onClick='ui_presetadd', flexibleWidth='0', preferredWidth='100'}},\n                }},\n            }}\n        end\n        --PERMISSIONS\n        local permViewPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='Text', attributes={alignment='UpperMiddle', fontSize='24', text='Read Permissions', onClick='ui_togglesection(view_permissions)'}},\n        }}\n        if (sectionVis.view_permissions) then\n            permViewPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='Text', attributes={alignment='UpperMiddle', fontSize='24', text='Read Permissions', onClick='ui_togglesection(view_permissions)'}},\n                {tag='VerticalLayout', children={\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false'}, children={\n                        {tag='Text', attributes={text='By Level', preferredHeight='40', preferredWidth='100', flexibleWidth='0'}},\n                        {tag='Toggle', attributes={text='Spectator', id='inp_perm_view_'..users.Grey, onClick='ui_permview_toggle('..users.Grey..')', isOn=(bit32.band(users.Grey, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Host', id='inp_perm_view_'..users.Host, onClick='ui_permview_toggle('..users.Host..')', isOn=(bit32.band(users.Host, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Promoted', id='inp_perm_view_'..users.Admin, onClick='ui_permview_toggle('..users.Admin..')', isOn=(bit32.band(users.Admin, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='GameMaster', id='inp_perm_view_'..users.Black, onClick='ui_permview_toggle('..users.Black..')', isOn=(bit32.band(users.Black, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                    }},\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false'}, children={\n                        {tag='Text', attributes={text='By Color', preferredHeight='40', preferredWidth='100', flexibleWidth='0'}},\n                        {tag='Toggle', attributes={text=' ', colors='White|White|#808080|#40404040', id='inp_perm_view_'..users.White, onClick='ui_permview_toggle('..users.White..')', isOn=(bit32.band(users.White, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Brown|Brown|#808080|#40404040', id='inp_perm_view_'..users.Brown, onClick='ui_permview_toggle('..users.Brown..')', isOn=(bit32.band(users.Brown, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Red|Red|#808080|#40404040', id='inp_perm_view_'..users.Red, onClick='ui_permview_toggle('..users.Red..')', isOn=(bit32.band(users.Red, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Orange|Orange|#808080|#40404040', id='inp_perm_view_'..users.Orange, onClick='ui_permview_toggle('..users.Orange..')', isOn=(bit32.band(users.Orange, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Yellow|Yellow|#808080|#40404040', id='inp_perm_view_'..users.Yellow, onClick='ui_permview_toggle('..users.Yellow..')', isOn=(bit32.band(users.Yellow, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Green|Green|#808080|#40404040', id='inp_perm_view_'..users.Green, onClick='ui_permview_toggle('..users.Green..')', isOn=(bit32.band(users.Green, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Teal|Teal|#808080|#40404040', id='inp_perm_view_'..users.Teal, onClick='ui_permview_toggle('..users.Teal..')', isOn=(bit32.band(users.Teal, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Blue|Blue|#808080|#40404040', id='inp_perm_view_'..users.Blue, onClick='ui_permview_toggle('..users.Blue..')', isOn=(bit32.band(users.Blue, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Purple|Purple|#808080|#40404040', id='inp_perm_view_'..users.Purple, onClick='ui_permview_toggle('..users.Purple..')', isOn=(bit32.band(users.Purple, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Pink|Pink|#808080|#40404040', id='inp_perm_view_'..users.Pink, onClick='ui_permview_toggle('..users.Pink..')', isOn=(bit32.band(users.Pink, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                    }},\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false'}, children={\n                        {tag='Text', attributes={text='By Team', preferredHeight='40', preferredWidth='100', flexibleWidth='0'}},\n                        {tag='Toggle', attributes={text='Clubs', id='inp_perm_view_'..users.Clubs, onClick='ui_permview_toggle('..users.Clubs..')', isOn=(bit32.band(users.Clubs, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Diamonds', id='inp_perm_view_'..users.Diamonds, onClick='ui_permview_toggle('..users.Diamonds..')', isOn=(bit32.band(users.Diamonds, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Hearts', id='inp_perm_view_'..users.Hearts, onClick='ui_permview_toggle('..users.Hearts..')', isOn=(bit32.band(users.Hearts, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Spades', id='inp_perm_view_'..users.Spades, onClick='ui_permview_toggle('..users.Spades..')', isOn=(bit32.band(users.Spades, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Jokers', id='inp_perm_view_'..users.Jokers, onClick='ui_permview_toggle('..users.Jokers..')', isOn=(bit32.band(users.Jokers, currentconfig.PERMVIEW) ~= 0), flexibleWidth='1'}},\n                    }},\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false'}, children={\n                        {tag='Text', attributes={text='Presets', preferredHeight='40', preferredWidth='100', flexibleWidth='0'}},\n                        {tag='Button', attributes={text='None', onClick='ui_permview_set(0)', flexibleWidth='1'}},\n                        {tag='Button', attributes={text='Seated', onClick='ui_permview_set(16376)', flexibleWidth='1'}},\n                        {tag='Button', attributes={text='Players', onClick='ui_permview_set(16368)', flexibleWidth='1'}},\n                        {tag='Button', attributes={text='All', onClick='ui_permview_set(524287)', flexibleWidth='1'}},\n                        {tag='Button', attributes={text='Default', onClick='ui_permview_set(524287)', flexibleWidth='1'}},\n                    }},\n                }}\n            }}\n        end\n\n        local permEditPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='Text', attributes={alignment='UpperMiddle', fontSize='24', text='Edit Permissions', onClick='ui_togglesection(edit_permissions)'}},\n        }}\n        if (sectionVis.edit_permissions) then\n            permEditPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='Text', attributes={alignment='UpperMiddle', fontSize='24', text='Edit Permissions', onClick='ui_togglesection(edit_permissions)'}},\n                {tag='VerticalLayout', children={\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false'}, children={\n                        {tag='Text', attributes={text='By Level', preferredHeight='40', preferredWidth='100', flexibleWidth='0'}},\n                        {tag='Toggle', attributes={text='Spectator', id='inp_perm_edit_'..users.Grey, onClick='ui_permedit_toggle('..users.Grey..')', isOn=(bit32.band(users.Grey, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Host', id='inp_perm_edit_'..users.Host, onClick='ui_permedit_toggle('..users.Host..')', isOn=(bit32.band(users.Host, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Promoted', id='inp_perm_edit_'..users.Admin, onClick='ui_permedit_toggle('..users.Admin..')', isOn=(bit32.band(users.Admin, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='GameMaster', id='inp_perm_edit_'..users.Black, onClick='ui_permedit_toggle('..users.Black..')', isOn=(bit32.band(users.Black, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                    }},\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false'}, children={\n                        {tag='Text', attributes={text='By Color', preferredHeight='40', preferredWidth='100', flexibleWidth='0'}},\n                        {tag='Toggle', attributes={text=' ', colors='White|White|#808080|#40404040', id='inp_perm_edit_'..users.White, onClick='ui_permedit_toggle('..users.White..')', isOn=(bit32.band(users.White, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Brown|Brown|#808080|#40404040', id='inp_perm_edit_'..users.Brown, onClick='ui_permedit_toggle('..users.Brown..')', isOn=(bit32.band(users.Brown, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Red|Red|#808080|#40404040', id='inp_perm_edit_'..users.Red, onClick='ui_permedit_toggle('..users.Red..')', isOn=(bit32.band(users.Red, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Orange|Orange|#808080|#40404040', id='inp_perm_edit_'..users.Orange, onClick='ui_permedit_toggle('..users.Orange..')', isOn=(bit32.band(users.Orange, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Yellow|Yellow|#808080|#40404040', id='inp_perm_edit_'..users.Yellow, onClick='ui_permedit_toggle('..users.Yellow..')', isOn=(bit32.band(users.Yellow, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Green|Green|#808080|#40404040', id='inp_perm_edit_'..users.Green, onClick='ui_permedit_toggle('..users.Green..')', isOn=(bit32.band(users.Green, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Teal|Teal|#808080|#40404040', id='inp_perm_edit_'..users.Teal, onClick='ui_permedit_toggle('..users.Teal..')', isOn=(bit32.band(users.Teal, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Blue|Blue|#808080|#40404040', id='inp_perm_edit_'..users.Blue, onClick='ui_permedit_toggle('..users.Blue..')', isOn=(bit32.band(users.Blue, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Purple|Purple|#808080|#40404040', id='inp_perm_edit_'..users.Purple, onClick='ui_permedit_toggle('..users.Purple..')', isOn=(bit32.band(users.Purple, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text=' ', colors='Pink|Pink|#808080|#40404040', id='inp_perm_edit_'..users.Pink, onClick='ui_permedit_toggle('..users.Pink..')', isOn=(bit32.band(users.Pink, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                    }},\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false'}, children={\n                        {tag='Text', attributes={text='By Team', preferredHeight='40', preferredWidth='100', flexibleWidth='0'}},\n                        {tag='Toggle', attributes={text='Clubs', id='inp_perm_edit_'..users.Clubs, onClick='ui_permedit_toggle('..users.Clubs..')', isOn=(bit32.band(users.Clubs, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Diamonds', id='inp_perm_edit_'..users.Diamonds, onClick='ui_permedit_toggle('..users.Diamonds..')', isOn=(bit32.band(users.Diamonds, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Hearts', id='inp_perm_edit_'..users.Hearts, onClick='ui_permedit_toggle('..users.Hearts..')', isOn=(bit32.band(users.Hearts, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Spades', id='inp_perm_edit_'..users.Spades, onClick='ui_permedit_toggle('..users.Spades..')', isOn=(bit32.band(users.Spades, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                        {tag='Toggle', attributes={text='Jokers', id='inp_perm_edit_'..users.Jokers, onClick='ui_permedit_toggle('..users.Jokers..')', isOn=(bit32.band(users.Jokers, currentconfig.PERMEDIT) ~= 0), flexibleWidth='1'}},\n                    }},\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false'}, children={\n                        {tag='Text', attributes={text='Presets', preferredHeight='40', preferredWidth='100', flexibleWidth='0'}},\n                        {tag='Button', attributes={text='None', onClick='ui_permedit_set(0)', flexibleWidth='1'}},\n                        {tag='Button', attributes={text='Seated', onClick='ui_permedit_set(16376)', flexibleWidth='1'}},\n                        {tag='Button', attributes={text='Players', onClick='ui_permedit_set(16368)', flexibleWidth='1'}},\n                        {tag='Button', attributes={text='All', onClick='ui_permedit_set(524287)', flexibleWidth='1'}},\n                        {tag='Button', attributes={text='Default', onClick='ui_permedit_set(10)', flexibleWidth='1'}},\n                    }},\n                }}\n            }}\n        end\n\n        --BARS\n        local barsPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Bars', onClick='ui_togglesection(bars)'}},\n                {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_BARS and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(BARS)', id='module_toggle_bars'}},\n            }},\n        }}\n        if (sectionVis.bars) then\n            local barList = {\n                {tag='Row', attributes={preferredHeight=30}, children={\n                    {tag='Cell', children={{tag='Text', attributes={alignment='LowerCenter', text='Name'}}}},\n                    {tag='Cell', children={{tag='Text', attributes={alignment='LowerCenter', text='Color'}}}},\n                    {tag='Cell', children={{tag='Text', attributes={alignment='LowerCenter', text='Current'}}}},\n                    {tag='Cell', children={{tag='Text', attributes={alignment='LowerCenter', text='Max'}}}},\n                    {tag='Cell', children={{tag='Text', attributes={alignment='LowerCenter', text='Text'}}}},\n                    {tag='Cell', children={{tag='Text', attributes={alignment='LowerCenter', text='Big'}}}},\n                    {tag='Cell', children={{tag='Text', attributes={alignment='LowerCenter', text=''}}}},\n                }}\n            }\n            for i,bar in pairs(currentconfig.BARS) do\n                table.insert(barList, {tag='Row', attributes={preferredHeight=40}, children={\n                    {tag='Cell', children={{tag='InputField', attributes={id='inp_bar_'..i..'_name', text=bar[1], onEndEdit='ui_editbar'}}}},\n                    {tag='Cell', children={{tag='InputField', attributes={id='inp_bar_'..i..'_color', text=bar[2], onEndEdit='ui_editbar'}}}},\n                    {tag='Cell', children={{tag='InputField', attributes={id='inp_bar_'..i..'_current', text=bar[3], onEndEdit='ui_editbar', characterValidation='Integer'}}}},\n                    {tag='Cell', children={{tag='InputField', attributes={id='inp_bar_'..i..'_maximum', text=bar[4], onEndEdit='ui_editbar', characterValidation='Integer'}}}},\n                    {tag='Cell', children={{tag='Button', attributes={width=20, id='inp_bar_'..i..'_text', image=(bar[5] and 'ui_checkon' or 'ui_checkoff'), onClick='ui_editbar'}}}},\n                    {tag='Cell', children={{tag='Button', attributes={width=20, id='inp_bar_'..i..'_big', image=(bar[6] and 'ui_checkon' or 'ui_checkoff'), onClick='ui_editbar'}}}},\n                    {tag='Cell', children={{tag='Button', attributes={width=20, image='ui_close', onClick='ui_rembar('..i..')'}}}},\n                }})\n            end\n            barsPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                    {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Bars', onClick='ui_togglesection(bars)'}},\n                    {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_BARS and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(BARS)', id='module_toggle_bars'}},\n                }},\n                {tag='TableLayout', attributes={columnWidths = '0 180 100 100 40 40 40', preferredHeight = ((#(currentconfig.BARS)+1) * 40)}, children=barList},\n                {tag='HorizontalLayout', attributes={childForceExpandWidth='false', childAlignment='MiddleRight'}, children={\n                    {tag='Button', attributes={text='Add Bar', onClick='ui_addbar', flexibleWidth='0', preferredWidth='100'}},\n                }},\n            }}\n        end\n\n        --MARKERS\n        local markersPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Markers', onClick='ui_togglesection(markers)'}},\n                {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_MARKERS and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(MARKERS)', id='module_toggle_markers'}},\n            }},\n        }}\n        if (sectionVis.markers) then\n            markersPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                    {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Markers', onClick='ui_togglesection(markers)'}},\n                    {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_MARKERS and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(MARKERS)', id='module_toggle_markers'}},\n                }},\n                {tag='Text', attributes={text='There are no additional parameters for this module.'}},\n            }}\n        end\n\n        --ARCS\n        local arcPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Arcs', onClick='ui_togglesection(arcs)'}},\n                {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_ARC and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(ARC)', id='module_toggle_arc'}},\n            }},\n        }}\n\n        if (sectionVis.arcs) then\n            local arcOptions = {}\n            local arcButtons = {}\n\n            table.insert(arcButtons, {tag='ToggleButton', attributes={id='inp_arc_shape_-1', onClick='ui_editarc_shape(-1)', preferredWidth=40, isOn = currentconfig.ARCS.SHAPE == -1, image='ui_help_outline'}})\n            for i,shape in pairs(arcshapes) do\n                table.insert(arcButtons, {tag='ToggleButton', attributes={id='inp_arc_shape_'..i, onClick='ui_editarc_shape('..i..')', preferredWidth=40, isOn = currentconfig.ARCS.SHAPE == i, image='arc_'..shape}})\n            end\n\n\n            if (currentconfig.ARCS.MODE == const.INCREMENTAL) then\n                arcOptions = {  tag='VerticalLayout', attributes={color='#404040', padding='10 10 10 10', spacing='5', childForceExpandHeight=false}, children={\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='HorizontalLayout', attributes={spacing='5', childForceExpandWidth=false}, children=arcButtons},\n                        {tag='VerticalLayout', attributes={id='cnt_arc_mesh', flexibleWidth=0, preferredWidth=400, active=(currentconfig.ARCS.SHAPE == -1)}, children={\n                            {tag='Text', attributes={text='Arc Model URL'}},\n                            {tag='InputField', attributes={id='inp_arc_mesh', text=currentconfig.ARCS.MESH, onEndEdit='ui_editarc'}},\n                        }},\n                    }},\n                    {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=300}, children={\n                            {tag='Text', attributes={text='Scale Factor'}},\n                            {tag='InputField', attributes={id='inp_arc_scale', text=currentconfig.ARCS.SCALE, onEndEdit='ui_editarc', characterValidation='Decimal'}},\n                        }},\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=300}, children={\n                            {tag='Text', attributes={text='Max Increments'}},\n                            {tag='InputField', attributes={id='inp_arc_max', text=currentconfig.ARCS.MAX, onEndEdit='ui_editarc', characterValidation='Integer'}},\n                        }},\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=300}, children={\n                            {tag='Text', attributes={text='\\'Zero\\' radius'}},\n                            {tag='InputField', attributes={id='inp_arc_zero', text=currentconfig.ARCS.ZERO, onEndEdit='ui_editarc', characterValidation='Decimal'}},\n                        }},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Color'}},\n                        {tag='HorizontalLayout', attributes={flexibleWidth=0, preferredHeight='40', spacing=5, childForceExpandWidth = false}, children={\n                            {tag='InputField', attributes={id='inp_arc_color', text=currentconfig.ARCS.COLOR or 'inherit', flexibleWidth='1', onEndEdit='ui_editarc'}},\n                            {tag='Button', attributes={image='ui_share', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_arc_setcolor(inherit)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_arc_setcolor(#ffffff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Brown|Brown|#808080|#40404040', onClick='ui_arc_setcolor(#713b17)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Red|Red|#808080|#40404040', onClick='ui_arc_setcolor(#da1918)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Orange|Orange|#808080|#40404040', onClick='ui_arc_setcolor(#f4641d)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Yellow|Yellow|#808080|#40404040', onClick='ui_arc_setcolor(#e7e52c)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Green|Green|#808080|#40404040', onClick='ui_arc_setcolor(#31b32b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Teal|Teal|#808080|#40404040', onClick='ui_arc_setcolor(#21b19b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Blue|Blue|#808080|#40404040', onClick='ui_arc_setcolor(#1f87ff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Purple|Purple|#808080|#40404040', onClick='ui_arc_setcolor(#a020f0)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Pink|Pink|#808080|#40404040', onClick='ui_arc_setcolor(#f570ce)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Black|Black|#808080|#40404040', onClick='ui_arc_setcolor(#191919)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Grey|Grey|#808080|#40404040', onClick='ui_arc_setcolor(#aaaaaa)'}},\n                        }}\n                    }},\n                }}\n            elseif (currentconfig.ARCS.MODE == const.STATIC) then\n                arcOptions = { tag='VerticalLayout', attributes={color='#404040', padding='10 10 10 10', spacing='5', childForceExpandHeight=false}, children={\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='HorizontalLayout', attributes={spacing='5', childForceExpandWidth=false}, children=arcButtons},\n                        {tag='VerticalLayout', attributes={id='cnt_arc_mesh', flexibleWidth=0, preferredWidth=400, active=(currentconfig.ARCS.SHAPE == -1)}, children={\n                            {tag='Text', attributes={text='Arc Model URL'}},\n                            {tag='InputField', attributes={id='inp_arc_mesh', text=currentconfig.ARCS.MESH, onEndEdit='ui_editarc'}},\n                        }},\n                    }},\n                    {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=300}, children={\n                            {tag='Text', attributes={text='Scale Factor'}},\n                            {tag='InputField', attributes={id='inp_arc_scale', text=currentconfig.ARCS.SCALE, onEndEdit='ui_editarc', characterValidation='Decimal'}},\n                        }},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Color'}},\n                        {tag='HorizontalLayout', attributes={flexibleWidth=0, preferredHeight='40', spacing=5, childForceExpandWidth = false}, children={\n                            {tag='InputField', attributes={id='inp_arc_color', text=currentconfig.ARCS.COLOR or 'inherit', flexibleWidth='1', onEndEdit='ui_editarc'}},\n                            {tag='Button', attributes={image='ui_share', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_arc_setcolor(inherit)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_arc_setcolor(#ffffff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Brown|Brown|#808080|#40404040', onClick='ui_arc_setcolor(#713b17)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Red|Red|#808080|#40404040', onClick='ui_arc_setcolor(#da1918)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Orange|Orange|#808080|#40404040', onClick='ui_arc_setcolor(#f4641d)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Yellow|Yellow|#808080|#40404040', onClick='ui_arc_setcolor(#e7e52c)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Green|Green|#808080|#40404040', onClick='ui_arc_setcolor(#31b32b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Teal|Teal|#808080|#40404040', onClick='ui_arc_setcolor(#21b19b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Blue|Blue|#808080|#40404040', onClick='ui_arc_setcolor(#1f87ff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Purple|Purple|#808080|#40404040', onClick='ui_arc_setcolor(#a020f0)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Pink|Pink|#808080|#40404040', onClick='ui_arc_setcolor(#f570ce)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Black|Black|#808080|#40404040', onClick='ui_arc_setcolor(#191919)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Grey|Grey|#808080|#40404040', onClick='ui_arc_setcolor(#aaaaaa)'}},\n                        }}\n                    }},\n                }}\n            elseif (currentconfig.ARCS.MODE == const.BRACKETS) then\n\n                local bracketList = {}\n\n                for i,v in pairs(currentconfig.ARCS.BRACKETS) do\n                    table.insert(bracketList, {\n                        tag='InputField', attributes={id='inp_arcbracket_'..i, text=v, minWidth='80', onEndEdit='ui_editarcbracket', characterValidation='Integer'}\n                    })\n                end\n\n                arcOptions = { tag='VerticalLayout', attributes={color='#404040', padding='10 10 10 10', spacing='5', childForceExpandHeight=false}, children={\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='HorizontalLayout', attributes={spacing='5', childForceExpandWidth=false}, children=arcButtons},\n                        {tag='VerticalLayout', attributes={id='cnt_arc_mesh', flexibleWidth=0, preferredWidth=400, active=(currentconfig.ARCS.SHAPE == -1)}, children={\n                            {tag='Text', attributes={text='Arc Model URL'}},\n                            {tag='InputField', attributes={id='inp_arc_mesh', text=currentconfig.ARCS.MESH, onEndEdit='ui_editarc'}},\n                        }},\n                    }},\n                    {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=300}, children={\n                            {tag='Text', attributes={text='Scale Factor'}},\n                            {tag='InputField', attributes={id='inp_arc_scale', text=currentconfig.ARCS.SCALE, onEndEdit='ui_editarc', characterValidation='Decimal'}},\n                        }},\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=300}, children={\n                            {tag='Text', attributes={text='\\'Zero\\' radius'}},\n                            {tag='InputField', attributes={id='inp_arc_zero', text=currentconfig.ARCS.ZERO, onEndEdit='ui_editarc', characterValidation='Decimal'}},\n                        }},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Color'}},\n                        {tag='HorizontalLayout', attributes={flexibleWidth=0, preferredHeight='40', spacing=5, childForceExpandWidth = false}, children={\n                            {tag='InputField', attributes={id='inp_arc_color', text=currentconfig.ARCS.COLOR or 'inherit', flexibleWidth='1', onEndEdit='ui_editarc'}},\n                            {tag='Button', attributes={image='ui_share', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_arc_setcolor(inherit)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_arc_setcolor(#ffffff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Brown|Brown|#808080|#40404040', onClick='ui_arc_setcolor(#713b17)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Red|Red|#808080|#40404040', onClick='ui_arc_setcolor(#da1918)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Orange|Orange|#808080|#40404040', onClick='ui_arc_setcolor(#f4641d)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Yellow|Yellow|#808080|#40404040', onClick='ui_arc_setcolor(#e7e52c)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Green|Green|#808080|#40404040', onClick='ui_arc_setcolor(#31b32b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Teal|Teal|#808080|#40404040', onClick='ui_arc_setcolor(#21b19b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Blue|Blue|#808080|#40404040', onClick='ui_arc_setcolor(#1f87ff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Purple|Purple|#808080|#40404040', onClick='ui_arc_setcolor(#a020f0)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Pink|Pink|#808080|#40404040', onClick='ui_arc_setcolor(#f570ce)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Black|Black|#808080|#40404040', onClick='ui_arc_setcolor(#191919)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Grey|Grey|#808080|#40404040', onClick='ui_arc_setcolor(#aaaaaa)'}},\n                        }}\n                    }},\n                    {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                            {tag='Text', attributes={text='Brackets'}},\n                            {tag='HorizontalLayout', attributes={childForceExpandWidth=false, childForceExpandHeight=false, childAlignment='MiddleLeft'}, children={\n                                {tag='HorizontalScrollView', attributes={preferredHeight='65', color='transparent', flexibleWidth='1', horizontalScrollbarVisibility='Permanent'}, children={\n                                    {tag='HorizontalLayout', attributes={contentSizeFitter = 'horizontal', childForceExpandWidth=false, childForceExpandHeight=false, spacing='5'}, children=bracketList}\n                                }},\n                                {tag='Button', attributes={flexibleWidth='0', preferredWidth='40', image='ui_plus', onClick='ui_addarcbracket'}},\n                                {tag='Button', attributes={flexibleWidth='0', preferredWidth='40', image='ui_minus', onClick='ui_remarcbracket'}},\n                            }}\n                        }},\n                    }},\n                }}\n            end\n\n            arcPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                    {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Arcs', onClick='ui_togglesection(arcs)'}},\n                    {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_ARC and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(ARC)', id='module_toggle_arc'}},\n                }},\n                {tag='Text', attributes={text='Mode'}},\n                {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                    {tag='ToggleButton', attributes={onClick='ui_arcmode(1)', text='Incremental', isOn=(currentconfig.ARCS.MODE == 1)}},\n                    {tag='ToggleButton', attributes={onClick='ui_arcmode(2)', text='Static', isOn=(currentconfig.ARCS.MODE == 2)}},\n                    {tag='ToggleButton', attributes={onClick='ui_arcmode(3)', text='Brackets', isOn=(currentconfig.ARCS.MODE == 3)}},\n                }},\n                arcOptions\n\n            }}\n        end\n\n        -- Flags\n        local flagPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Flag', onClick='ui_togglesection(flag)'}},\n                {tag='Button', attributes={minWidth = 30, image=(currentconfig.LOCK_FLAG and 'ui_locked' or 'ui_unlocked'), onClick='ui_togglelock(FLAG)', id='flag_editability'}},\n                {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_FLAG and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(FLAG)', id='module_toggle_flag'}},\n            }},\n        }}\n        if (sectionVis.flag) then\n            flagPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                    {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Flag', onClick='ui_togglesection(flag)'}},\n                    {tag='Button', attributes={minWidth = 30, image=(currentconfig.LOCK_FLAG and 'ui_locked' or 'ui_unlocked'), onClick='ui_togglelock(FLAG)', id='flag_editability'}},\n                    {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_FLAG and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(FLAG)', id='module_toggle_flag'}},\n                }},\n                {tag='VerticalLayout', attributes={color='#404040', padding='10 10 10 10', spacing='5', childForceExpandHeight=false}, children={\n                    {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                            {tag='Text', attributes={text='Flag Image URL'}},\n                            {tag='InputField', attributes={id='inp_flag_image', text=currentconfig.FLAG.IMAGE or '', onEndEdit='ui_editflag'}},\n                        }},\n                    }},\n                    {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=200}, children={\n                            {tag='Text', attributes={text='Width'}},\n                            {tag='InputField', attributes={id='inp_flag_width', text=currentconfig.FLAG.WIDTH or 0, onEndEdit='ui_editflag', characterValidation='Decimal'}},\n                        }},\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=200}, children={\n                            {tag='Text', attributes={text='Height'}},\n                            {tag='InputField', attributes={id='inp_flag_height', text=currentconfig.FLAG.HEIGHT or 0, onEndEdit='ui_editflag', characterValidation='Decimal'}},\n                        }},\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=200, childForceExpandWidth = false, childForceExpandHeight = false, childAlignment='MiddleCenter'}, children={\n                            {tag='Text', attributes={text='Auto-on'}},\n                            {tag='Button', attributes={minWidth=30, preferredHeight=30, preferredWidth=30, image=((currentconfig.FLAG.AUTOMODE or false) and 'ui_checkon' or 'ui_checkoff'), onClick='ui_editflag', id='inp_flag_automode'}},\n                        }},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Color'}},\n                        {tag='HorizontalLayout', attributes={flexibleWidth=0, preferredHeight='40', spacing=5, childForceExpandWidth = false}, children={\n                            {tag='InputField', attributes={id='inp_flag_color', text=currentconfig.FLAG.COLOR or 'inherit', flexibleWidth='1', onEndEdit='ui_editflag'}},\n                            {tag='Button', attributes={image='ui_share', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_flag_setcolor(inherit)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_flag_setcolor(#ffffff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Brown|Brown|#808080|#40404040', onClick='ui_flag_setcolor(#713b17)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Red|Red|#808080|#40404040', onClick='ui_flag_setcolor(#da1918)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Orange|Orange|#808080|#40404040', onClick='ui_flag_setcolor(#f4641d)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Yellow|Yellow|#808080|#40404040', onClick='ui_flag_setcolor(#e7e52c)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Green|Green|#808080|#40404040', onClick='ui_flag_setcolor(#31b32b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Teal|Teal|#808080|#40404040', onClick='ui_flag_setcolor(#21b19b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Blue|Blue|#808080|#40404040', onClick='ui_flag_setcolor(#1f87ff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Purple|Purple|#808080|#40404040', onClick='ui_flag_setcolor(#a020f0)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Pink|Pink|#808080|#40404040', onClick='ui_flag_setcolor(#f570ce)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Black|Black|#808080|#40404040', onClick='ui_flag_setcolor(#191919)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Grey|Grey|#808080|#40404040', onClick='ui_flag_setcolor(#aaaaaa)'}},\n                        }}\n                    }},\n                }}\n            }}\n        end\n\n        local geometryPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Geometry', onClick='ui_togglesection(geometry)'}},\n                {tag='Button', attributes={minWidth = 30, image=(currentconfig.LOCK_GEOMETRY and 'ui_locked' or 'ui_unlocked'), onClick='ui_togglelock(GEOMETRY)', id='geometry_editability'}},\n                {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_GEOMETRY and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(GEOMETRY)', id='module_toggle_geometry'}},\n            }},\n        }}\n        if (sectionVis.geometry) then\n            local colorlist = {}\n\n            geometryPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                    {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Geometry', onClick='ui_togglesection(geometry)'}},\n                    {tag='Button', attributes={minWidth = 30, image=(currentconfig.LOCK_GEOMETRY and 'ui_locked' or 'ui_unlocked'), onClick='ui_togglelock(GEOMETRY)', id='geometry_editability'}},\n                    {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_GEOMETRY and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(GEOMETRY)', id='module_toggle_geometry'}},\n                }},\n                {tag='VerticalLayout', attributes={color='#404040', padding='10 10 10 10', spacing='5', childForceExpandHeight=false}, children={\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Mesh URL'}},\n                        {tag='InputField', attributes={id='inp_geometry_mesh', text=currentconfig.GEOMETRY.MESH or '', onEndEdit='ui_editgeometry'}},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Texture URL'}},\n                        {tag='InputField', attributes={id='inp_geometry_texture', text=currentconfig.GEOMETRY.TEXTURE or '', onEndEdit='ui_editgeometry'}},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Normal URL'}},\n                        {tag='InputField', attributes={id='inp_geometry_texture', text=currentconfig.GEOMETRY.NORMAL or '', onEndEdit='ui_editgeometry'}},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Material'}},\n                        {tag='HorizontalLayout', attributes={flexibleWidth=0, preferredHeight='40', spacing=5}, children={\n                            {tag='ToggleButton', attributes={id='inp_geometry_material_0', isOn=(currentconfig.GEOMETRY.MATERIAL == 0), onClick='ui_editgeometry('..const.PLASTIC..')', text='Plastic'}},\n                            {tag='ToggleButton', attributes={id='inp_geometry_material_1', isOn=(currentconfig.GEOMETRY.MATERIAL == 1), onClick='ui_editgeometry('..const.WOOD..')', text='Wood'}},\n                            {tag='ToggleButton', attributes={id='inp_geometry_material_2', isOn=(currentconfig.GEOMETRY.MATERIAL == 2), onClick='ui_editgeometry('..const.METAL..')', text='Metal'}},\n                            {tag='ToggleButton', attributes={id='inp_geometry_material_3', isOn=(currentconfig.GEOMETRY.MATERIAL == 3), onClick='ui_editgeometry('..const.CARDBOARD..')', text='Cardboard'}},\n                        }},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Color'}},\n                        {tag='HorizontalLayout', attributes={flexibleWidth=0, preferredHeight='40', spacing=5, childForceExpandWidth = false}, children={\n                            {tag='InputField', attributes={id='inp_geometry_color', text=currentconfig.GEOMETRY.COLOR or 'inherit', flexibleWidth='1', onEndEdit='ui_editgeometry'}},\n                            {tag='Button', attributes={image='ui_share', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_geometry_setcolor(inherit)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_geometry_setcolor(#ffffff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Brown|Brown|#808080|#40404040', onClick='ui_geometry_setcolor(#713b17)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Red|Red|#808080|#40404040', onClick='ui_geometry_setcolor(#da1918)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Orange|Orange|#808080|#40404040', onClick='ui_geometry_setcolor(#f4641d)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Yellow|Yellow|#808080|#40404040', onClick='ui_geometry_setcolor(#e7e52c)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Green|Green|#808080|#40404040', onClick='ui_geometry_setcolor(#31b32b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Teal|Teal|#808080|#40404040', onClick='ui_geometry_setcolor(#21b19b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Blue|Blue|#808080|#40404040', onClick='ui_geometry_setcolor(#1f87ff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Purple|Purple|#808080|#40404040', onClick='ui_geometry_setcolor(#a020f0)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Pink|Pink|#808080|#40404040', onClick='ui_geometry_setcolor(#f570ce)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Black|Black|#808080|#40404040', onClick='ui_geometry_setcolor(#191919)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Grey|Grey|#808080|#40404040', onClick='ui_geometry_setcolor(#aaaaaa)'}},\n                        }}\n                    }},\n                }}\n            }}\n        end\n\n        local movementPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Movement', onClick='ui_togglesection(movement)'}},\n                {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_MOVEMENT and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(MOVEMENT)', id='module_toggle_movement'}},\n            }},\n        }}\n        if (sectionVis.movement) then\n\n            local moveOptions = {}\n\n            if (currentconfig.MOVEMENT.MODE == const.SIMPLEGAUGE) then\n                moveOptions = { tag='VerticalLayout', attributes={color='#404040', padding='10 10 10 10', spacing='5', childForceExpandHeight=false}, children={\n                    {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth = 1, childForceExpandHeight=false}, children={\n                            {tag='Text', attributes={text='Segment Length'}},\n                            {tag='InputField', attributes={id='inp_move_speeddistance', text=currentconfig.MOVEMENT.SPEEDDISTANCE or '1', onEndEdit='ui_editmovement', characterValidation='Decimal'}},\n                            {tag='Text', attributes={text='Speed Maximum'}},\n                            {tag='InputField', attributes={id='inp_move_speedmax', text=currentconfig.MOVEMENT.SPEEDMAX or '1', onEndEdit='ui_editmovement', characterValidation='Decimal'}},\n                        }},\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth = 1, childForceExpandHeight=false}, children={\n                            {tag='Text', attributes={text='Notch Angle'}},\n                            {tag='InputField', attributes={id='inp_move_turnnotch', text=currentconfig.MOVEMENT.TURNNOTCH or '22.5', onEndEdit='ui_editmovement', characterValidation='Decimal'}},\n                            {tag='Text', attributes={text='Notch Limit'}},\n                            {tag='InputField', attributes={id='inp_move_turnmax', text=currentconfig.MOVEMENT.TURNMAX or '4', onEndEdit='ui_editmovement', characterValidation='Integer'}},\n                        }},\n                    }}\n                }}\n            elseif (currentconfig.MOVEMENT.MODE == const.COMPLEXGAUGE) then\n                local moveSegments = {}\n                for i,v in pairs(currentconfig.MOVEMENT.SEGMENTS) do\n                    local notches = {}\n                    for j,u in pairs(v[2]) do\n                        table.insert(notches, {\n                            tag='InputField',\n                            attributes={\n                                preferredWidth='100',\n                                flexibleWidth=0,\n                                id='inp_movesegments_editnotch_'..i..'_'..j,\n                                text=v[2][j],\n                                onEndEdit = 'ui_movesegments_editnotch'\n                            }\n                        })\n                    end\n                    table.insert(moveSegments, {tag='HorizontalLayout', attributes={childForceExpandWidth=false, childForceExpandHeight=false, minHeight='60', childAlignment='MiddleLeft'}, children={\n                        {tag='InputField', attributes={id='inp_movesegments_distance_'..i, onEndEdit = 'ui_movesegments_editsegment', text=v[1], flexibleWidth = 1, preferredWidth = 40, interactable=(i ~= 1)}},\n                        {tag='Button', attributes={id='btn_movesegments_remsegment_'..i, onClick='ui_movesegments_editsegment', image='ui_close', interactable=(i ~= 1), flexibleWidth = 0, preferredWidth = 40}},\n                        {tag='HorizontalScrollView', attributes={flexibleWidth = 1, preferredWidth = 400, childForceExpandWidth=false, flexibleHeight=1}, children={\n                            {tag='HorizontalLayout', attributes={childForceExpandWidth=false, contentSizeFitter='horizontal'}, children=notches}\n                        }},\n                        {tag='Button', attributes={id='btn_movesegments_addnotch_'..i, onClick='ui_movesegments_editnotch', image='ui_plus', active=true, flexibleWidth = 0, preferredWidth = 40}},\n                        {tag='Button', attributes={id='btn_movesegments_remnotch_'..i, onClick='ui_movesegments_editnotch', image='ui_minus', interactable=(#v[2] > 0), flexibleWidth = 0, preferredWidth = 40}},\n                    }})\n                end\n                moveOptions = { tag='VerticalLayout', attributes={color='#404040', padding='10 10 10 10', spacing='5', childForceExpandHeight=false}, children={\n                    {tag='Text', attributes={text='Segments'}},\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false', childAlignment='MiddleLeft'}, children={\n                        {tag='Text', attributes={text='Distance', flexibleWidth=1, preferredWidth=40}},\n                        {tag='Text', attributes={text='', flexibleWidth=0, preferredWidth=40}},\n                        {tag='Text', attributes={text='Notches (in Degrees)', flexibleWidth=1, preferredWidth=400}},\n                        {tag='Text', attributes={text='', flexibleWidth=0, preferredWidth=40}},\n                        {tag='Text', attributes={text='', flexibleWidth=0, preferredWidth=40}},\n                    }},\n                    {tag='VerticalLayout', attributes={contentSizeFitter='vertical'}, children=moveSegments},\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false', childAlignment='MiddleRight'}, children={\n                        {tag='Button', attributes={id='btn_movesegments_addsegment', text='Add Segment', onClick='ui_movesegments_editsegment', flexibleWidth='0', preferredWidth='200'}},\n                    }},\n                }}\n            elseif (currentconfig.MOVEMENT.MODE == const.RADIUS) then\n                moveOptions = { tag='VerticalLayout', attributes={color='#404040', padding='10 10 10 10', spacing='5', childForceExpandHeight=false}, children={\n                    {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth = 1, childForceExpandHeight=false}, children={\n                            {tag='Text', attributes={text='Speed Minimum'}},\n                            {tag='InputField', attributes={id='inp_move_speedmin', text=currentconfig.MOVEMENT.SPEEDMIN or '0', onEndEdit='ui_editmovement', characterValidation='Decimal'}},\n                            {tag='Text', attributes={text='Speed Maximum'}},\n                            {tag='InputField', attributes={id='inp_move_speedmax', text=currentconfig.MOVEMENT.SPEEDMAX or '1', onEndEdit='ui_editmovement', characterValidation='Decimal'}},\n                        }},\n                        {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth = 1, childForceExpandHeight=false}, children={\n                            {tag='Text', attributes={text='Origin'}},\n                            {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                                {tag='ToggleButton', attributes={id='inp_move_origin_center', onClick='ui_editmovement(CENTER)', text='Center', isOn=(currentconfig.MOVEMENT.ORIGIN == 'CENTER')}},\n                                {tag='ToggleButton', attributes={id='inp_move_origin_edge', onClick='ui_editmovement(EDGE)', text='Edge', isOn=(currentconfig.MOVEMENT.ORIGIN == 'EDGE')}},\n                            }},\n                        }},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=400}, children={\n                        {tag='Text', attributes={text='Color'}},\n                        {tag='HorizontalLayout', attributes={flexibleWidth=0, preferredHeight='40', spacing=5, childForceExpandWidth = false}, children={\n                            {tag='InputField', attributes={id='inp_move_color', text=currentconfig.MOVEMENT.COLOR or 'inherit', flexibleWidth='1', onEndEdit='ui_editmovement'}},\n                            {tag='Button', attributes={image='ui_share', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_movement_setcolor(inherit)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_movement_setcolor(#ffffff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Brown|Brown|#808080|#40404040', onClick='ui_movement_setcolor(#713b17)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Red|Red|#808080|#40404040', onClick='ui_movement_setcolor(#da1918)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Orange|Orange|#808080|#40404040', onClick='ui_movement_setcolor(#f4641d)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Yellow|Yellow|#808080|#40404040', onClick='ui_movement_setcolor(#e7e52c)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Green|Green|#808080|#40404040', onClick='ui_movement_setcolor(#31b32b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Teal|Teal|#808080|#40404040', onClick='ui_movement_setcolor(#21b19b)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Blue|Blue|#808080|#40404040', onClick='ui_movement_setcolor(#1f87ff)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Purple|Purple|#808080|#40404040', onClick='ui_movement_setcolor(#a020f0)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Pink|Pink|#808080|#40404040', onClick='ui_movement_setcolor(#f570ce)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Black|Black|#808080|#40404040', onClick='ui_movement_setcolor(#191919)'}},\n                            {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Grey|Grey|#808080|#40404040', onClick='ui_movement_setcolor(#aaaaaa)'}},\n                        }}\n                    }},\n                }}\n            elseif (currentconfig.MOVEMENT.MODE == const.DEFINED) then\n                local moveDefinitions = {\n                    {tag='Row', attributes={}, children={\n                        {tag='Cell', children={{tag='Text', attributes={alignment='MiddleCenter', text='Name'}}}},\n                        {tag='Cell', children={{tag='Text', attributes={alignment='MiddleCenter', text='Icon URL'}}}},\n                        {tag='Cell', children={{tag='Text', attributes={alignment='MiddleCenter', text='iconX'}}}},\n                        {tag='Cell', children={{tag='Text', attributes={alignment='MiddleCenter', text='iconY'}}}},\n                        {tag='Cell', children={{tag='Text', attributes={alignment='MiddleCenter', text='posX'}}}},\n                        {tag='Cell', children={{tag='Text', attributes={alignment='MiddleCenter', text='posY'}}}},\n                        {tag='Cell', children={{tag='Text', attributes={alignment='MiddleCenter', text='rot'}}}},\n                        {tag='Cell', children={{tag='Text', attributes={alignment='MiddleCenter', text='color'}}}},\n                        --{tag='Cell', children={{tag='Text', attributes={alignment='MiddleCenter', text='', image='ui_close'}}}},\n                    }},\n                }\n                for i,v in pairs(currentconfig.MOVEMENT.DEFINITIONS) do\n                    table.insert(moveDefinitions, {tag='Row', attributes={}, children={\n                        {tag='Cell', children={{tag='InputField', attributes={fontSize='18', id='inp_movedefinitions_name_'..i, onEndEdit = 'ui_movedefinitions', text=v[1]}}}},\n                        {tag='Cell', children={{tag='InputField', attributes={fontSize='18', id='inp_movedefinitions_url_'..i, onEndEdit = 'ui_movedefinitions', text=v[2]}}}},\n                        {tag='Cell', children={{tag='InputField', attributes={fontSize='18', id='inp_movedefinitions_iconx_'..i, onEndEdit = 'ui_movedefinitions', text=v[3], characterValidation='Integer'}}}},\n                        {tag='Cell', children={{tag='InputField', attributes={fontSize='18', id='inp_movedefinitions_icony_'..i, onEndEdit = 'ui_movedefinitions', text=v[4], characterValidation='Integer'}}}},\n                        {tag='Cell', children={{tag='InputField', attributes={fontSize='18', id='inp_movedefinitions_posx_'..i, onEndEdit = 'ui_movedefinitions', text=v[5], characterValidation='Decimal'}}}},\n                        {tag='Cell', children={{tag='InputField', attributes={fontSize='18', id='inp_movedefinitions_posy_'..i, onEndEdit = 'ui_movedefinitions', text=v[6], characterValidation='Decimal'}}}},\n                        {tag='Cell', children={{tag='InputField', attributes={fontSize='18', id='inp_movedefinitions_rot_'..i, onEndEdit = 'ui_movedefinitions', text=v[7], characterValidation='Decimal'}}}},\n                        {tag='Cell', children={{tag='InputField', attributes={fontSize='18', id='inp_movedefinitions_color_'..i, onEndEdit = 'ui_movedefinitions', text=v[8]}}}},\n                        {tag='Cell', children={{tag='Button', attributes={id='inp_movedefinitions_remdef_'..i, onClick='ui_movedefinitions', image='ui_close', interactable=(i ~= 1)}}}},\n                    }})\n                end\n                moveOptions = { tag='VerticalLayout', attributes={color='#404040', padding='10 10 10 10', spacing='5', childForceExpandHeight=false}, children={\n                    {tag='Text', attributes={text='Definitions'}},\n                    {tag='TableLayout', attributes={columnWidths = '120 0 60 60 60 60 60 100 40', preferredHeight = ((#(currentconfig.MOVEMENT.DEFINITIONS)+1) * 36)}, children=moveDefinitions},\n                    {tag='HorizontalLayout', attributes={childForceExpandWidth='false', childAlignment='MiddleRight'}, children={\n                        {tag='Button', attributes={id='inp_movedefinitions_adddef', text='Add Definition', onClick='ui_movedefinitions', flexibleWidth='0', preferredWidth='200'}},\n                    }},\n                }}\n            end\n            movementPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                    {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Movement', onClick='ui_togglesection(movement)'}},\n                    {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_MOVEMENT and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(MOVEMENT)', id='module_toggle_movement'}},\n                }},\n                {tag='HorizontalLayout', attributes={spacing='5', childForceExpandHeight=false}, children={\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth = 1, childForceExpandHeight=false}, children={\n                        {tag='Text', attributes={text='UI Offset'}},\n                        {tag='InputField', attributes={id='inp_move_uioffset', text=currentconfig.MOVEMENT.UIOFFSET or '0.25', onEndEdit='ui_editmovement', characterValidation='Decimal'}},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth = 1, childForceExpandHeight=false}, children={\n                        {tag='Text', attributes={text='Landing Area'}},\n                        {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                            {tag='Toggle', attributes={id='inp_move_landshow', text='Show', isOn=currentconfig.MOVEMENT.LANDSHOW or false, onValueChanged='ui_editmovement'}},\n                            {tag='Toggle', attributes={id='inp_move_landtest', text='Collision Check', isOn=currentconfig.MOVEMENT.LANDTEST or false, onValueChanged='ui_editmovement'}},\n                        }}\n                    }},\n                }},\n                {tag='Text', attributes={text='Mode'}},\n                {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                    {tag='ToggleButton', attributes={onClick='ui_movemode('..const.SIMPLEGAUGE..')', text='Simple Gauge', isOn=(currentconfig.MOVEMENT.MODE == const.SIMPLEGAUGE)}},\n                    {tag='ToggleButton', attributes={onClick='ui_movemode('..const.RADIUS..')', text='Radius Limit', isOn=(currentconfig.MOVEMENT.MODE == const.RADIUS)}},\n                    {tag='ToggleButton', attributes={onClick='ui_movemode('..const.COMPLEXGAUGE..')', text='Complex Gauge', isOn=(currentconfig.MOVEMENT.MODE == const.COMPLEXGAUGE)}},\n                    {tag='ToggleButton', attributes={onClick='ui_movemode('..const.DEFINED..')', text='Pre-Defined', isOn=(currentconfig.MOVEMENT.MODE == const.DEFINED)}},\n                }},\n                moveOptions\n            }}\n        end\n\n\n        local shieldsPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n            {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Shields', onClick='ui_togglesection(shields)'}},\n                {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_SHIELDS and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(SHIELDS)', id='module_toggle_shields'}},\n            }},\n        }}\n        if (sectionVis.shields) then\n            local shieldsOptions = {}\n            if (currentconfig.SHIELDS.SHAPE == const.SHIELD_FRONTBACK) then\n                shieldsOptions = {tag='TableLayout', attributes={columnWidths = '0 0 0 0', preferredHeight = '120'}, children = {\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Direction'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Value'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Minimum'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Maximum'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Critical'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Front'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_1', text=currentconfig.SHIELDS.CURRENT[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_1', text=currentconfig.SHIELDS.MINIMUM[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_1', text=currentconfig.SHIELDS.MAXIMUM[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_1', text=currentconfig.SHIELDS.CRITICAL[1], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Back'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_2', text=currentconfig.SHIELDS.CURRENT[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_2', text=currentconfig.SHIELDS.MINIMUM[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_2', text=currentconfig.SHIELDS.MAXIMUM[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_2', text=currentconfig.SHIELDS.CRITICAL[2], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                }}\n            end\n            if (currentconfig.SHIELDS.SHAPE == const.SHIELD_LEFTRIGHT) then\n                shieldsOptions = {tag='TableLayout', attributes={columnWidths = '0 0 0 0', preferredHeight = '120'}, children = {\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Direction'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Value'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Minimum'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Maximum'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Critical'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Left'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_1', text=currentconfig.SHIELDS.CURRENT[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_1', text=currentconfig.SHIELDS.MINIMUM[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_1', text=currentconfig.SHIELDS.MAXIMUM[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_1', text=currentconfig.SHIELDS.CRITICAL[1], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Right'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_2', text=currentconfig.SHIELDS.CURRENT[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_2', text=currentconfig.SHIELDS.MINIMUM[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_2', text=currentconfig.SHIELDS.MAXIMUM[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_2', text=currentconfig.SHIELDS.CRITICAL[2], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                }}\n            end\n            if (currentconfig.SHIELDS.SHAPE == const.SHIELD_FOURWAY) then\n                shieldsOptions = {tag='TableLayout', attributes={columnWidths = '0 0 0 0', preferredHeight = '200'}, children = {\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Direction'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Value'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Minimum'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Maximum'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Critical'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Front'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_1', text=currentconfig.SHIELDS.CURRENT[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_1', text=currentconfig.SHIELDS.MINIMUM[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_1', text=currentconfig.SHIELDS.MAXIMUM[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_1', text=currentconfig.SHIELDS.CRITICAL[1], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Left'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_2', text=currentconfig.SHIELDS.CURRENT[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_2', text=currentconfig.SHIELDS.MINIMUM[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_2', text=currentconfig.SHIELDS.MAXIMUM[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_2', text=currentconfig.SHIELDS.CRITICAL[2], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Right'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_3', text=currentconfig.SHIELDS.CURRENT[3], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_3', text=currentconfig.SHIELDS.MINIMUM[3], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_3', text=currentconfig.SHIELDS.MAXIMUM[3], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_3', text=currentconfig.SHIELDS.CRITICAL[3], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Back'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_4', text=currentconfig.SHIELDS.CURRENT[4], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_4', text=currentconfig.SHIELDS.MINIMUM[4], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_4', text=currentconfig.SHIELDS.MAXIMUM[4], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_4', text=currentconfig.SHIELDS.CRITICAL[4], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                }}\n            end\n            if (currentconfig.SHIELDS.SHAPE == const.SHIELD_SIXWAY) then\n                shieldsOptions = {tag='TableLayout', attributes={columnWidths = '0 0 0 0', preferredHeight = '280'}, children = {\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Direction'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Value'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Minimum'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Maximum'}}}},\n                        {tag='cell', children={{tag='text', attributes={alignment='MiddleCenter', text='Critical'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Front'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_1', text=currentconfig.SHIELDS.CURRENT[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_1', text=currentconfig.SHIELDS.MINIMUM[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_1', text=currentconfig.SHIELDS.MAXIMUM[1], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_1', text=currentconfig.SHIELDS.CRITICAL[1], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Front Left'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_2', text=currentconfig.SHIELDS.CURRENT[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_2', text=currentconfig.SHIELDS.MINIMUM[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_2', text=currentconfig.SHIELDS.MAXIMUM[2], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_2', text=currentconfig.SHIELDS.CRITICAL[2], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Front Right'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_3', text=currentconfig.SHIELDS.CURRENT[3], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_3', text=currentconfig.SHIELDS.MINIMUM[3], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_3', text=currentconfig.SHIELDS.MAXIMUM[3], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_3', text=currentconfig.SHIELDS.CRITICAL[3], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Back Left'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_4', text=currentconfig.SHIELDS.CURRENT[4], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_4', text=currentconfig.SHIELDS.MINIMUM[4], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_4', text=currentconfig.SHIELDS.MAXIMUM[4], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_4', text=currentconfig.SHIELDS.CRITICAL[4], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Back Right'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_5', text=currentconfig.SHIELDS.CURRENT[5], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_5', text=currentconfig.SHIELDS.MINIMUM[5], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_5', text=currentconfig.SHIELDS.MAXIMUM[5], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_5', text=currentconfig.SHIELDS.CRITICAL[5], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                    {tag='row', children={\n                        {tag='cell', children={{tag='text', attributes={text='Back'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_current_6', text=currentconfig.SHIELDS.CURRENT[6], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_minimum_6', text=currentconfig.SHIELDS.MINIMUM[6], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_maximum_6', text=currentconfig.SHIELDS.MAXIMUM[6], onEndEdit = 'ui_editshields'}}}},\n                        {tag='cell', children={{tag='InputField', attributes={id='inp_shields_critical_6', text=currentconfig.SHIELDS.CRITICAL[6], onEndEdit = 'ui_editshields'}}}},\n                    }},\n                }}\n            end\n\n            shieldsPanel = {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                {tag='HorizontalLayout', attributes={preferredHeight=30}, children={\n                    {tag='Text', attributes={preferredWidth = 1000, alignment='UpperLeft', fontSize='24', text='Module: Shields', onClick='ui_togglesection(shields)'}},\n                    {tag='Button', attributes={minWidth=30, preferredWidth=30, image=(currentconfig.MODULE_SHIELDS and 'ui_checkon' or 'ui_checkoff'), onClick='toggle_module(SHIELDS)', id='module_toggle_shields'}},\n                }},\n                {tag='HorizontalLayout', attributes={spacing='5', childForceExpandHeight=false}, children={\n                    {tag='VerticalLayout', attributes={ flexibleWidth=1, preferredWidth = 100, childForceExpandHeight=false}, children={\n                        {tag='Text', attributes={text='UI Height'}},\n                        {tag='InputField', attributes={id='inp_shields_uiheight', text=currentconfig.SHIELDS.UIHEIGHT or '0.25', onEndEdit='ui_editshields', characterValidation='Decimal'}},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=0, preferredWidth=100, childForceExpandWidth = false, childForceExpandHeight = false, childAlignment='MiddleCenter'}, children={\n                        {tag='Text', attributes={text='Auto-on'}},\n                        {tag='Button', attributes={minWidth=30, preferredHeight=30, preferredWidth=30, image=((currentconfig.SHIELDS.AUTOMODE or false) and 'ui_checkon' or 'ui_checkoff'), onClick='ui_editshields', id='inp_shield_automode'}},\n                    }},\n                    {tag='VerticalLayout', attributes={ flexibleWidth=1, preferredWidth = 400, childForceExpandHeight=false}, children={\n                        {tag='Text', attributes={text='Limit Behaviour'}},\n                        {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                            {tag='ToggleButton', attributes={onClick='ui_shieldslimitmode('..const.SHIELD_CAPATLIMIT..')', text='Cap at Limit', isOn=(currentconfig.SHIELDS.LIMITMODE == const.SHIELD_CAPATLIMIT)}},\n                            {tag='ToggleButton', attributes={onClick='ui_shieldslimitmode('..const.SHIELD_WRAPAROUND..')', text='Wrap Around', isOn=(currentconfig.SHIELDS.LIMITMODE == const.SHIELD_WRAPAROUND)}},\n                            {tag='ToggleButton', attributes={onClick='ui_shieldslimitmode('..const.SHIELD_IGNORELIMIT..')', text='Ignore Limit', isOn=(currentconfig.SHIELDS.LIMITMODE == const.SHIELD_IGNORELIMIT)}},\n                        }},\n                    }},\n                }},\n                {tag='VerticalLayout', attributes={ childForceExpandHeight=false }, children={\n                    {tag='Text', attributes={text='Normal Color'}},\n                    {tag='HorizontalLayout', attributes={flexibleWidth=0, preferredHeight='40', spacing=5, childForceExpandWidth = false}, children={\n                        {tag='InputField', attributes={id='inp_shields_color', flexibleWidth=1, text=currentconfig.SHIELDS.COLOR, onEndEdit='ui_editshields'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_shields_setcolor(#ffffff)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Brown|Brown|#808080|#40404040', onClick='ui_shields_setcolor(#713b17)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Red|Red|#808080|#40404040', onClick='ui_shields_setcolor(#da1918)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Orange|Orange|#808080|#40404040', onClick='ui_shields_setcolor(#f4641d)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Yellow|Yellow|#808080|#40404040', onClick='ui_shields_setcolor(#e7e52c)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Green|Green|#808080|#40404040', onClick='ui_shields_setcolor(#31b32b)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Teal|Teal|#808080|#40404040', onClick='ui_shields_setcolor(#21b19b)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Blue|Blue|#808080|#40404040', onClick='ui_shields_setcolor(#1f87ff)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Purple|Purple|#808080|#40404040', onClick='ui_shields_setcolor(#a020f0)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Pink|Pink|#808080|#40404040', onClick='ui_shields_setcolor(#f570ce)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Black|Black|#808080|#40404040', onClick='ui_shields_setcolor(#191919)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Grey|Grey|#808080|#40404040', onClick='ui_shields_setcolor(#aaaaaa)'}},\n                    }}\n                }},\n                {tag='VerticalLayout', attributes={ childForceExpandHeight=false }, children={\n                    {tag='Text', attributes={text='Critical Color'}},\n                    {tag='HorizontalLayout', attributes={flexibleWidth=0, preferredHeight='40', spacing=5, childForceExpandWidth = false}, children={\n                        {tag='InputField', attributes={id='inp_shields_critcolor', flexibleWidth=1, text=currentconfig.SHIELDS.CRITCOLOR, onEndEdit='ui_editshields'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='White|White|#808080|#40404040', onClick='ui_shields_setcritcolor(#ffffff)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Brown|Brown|#808080|#40404040', onClick='ui_shields_setcritcolor(#713b17)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Red|Red|#808080|#40404040', onClick='ui_shields_setcritcolor(#da1918)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Orange|Orange|#808080|#40404040', onClick='ui_shields_setcritcolor(#f4641d)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Yellow|Yellow|#808080|#40404040', onClick='ui_shields_setcritcolor(#e7e52c)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Green|Green|#808080|#40404040', onClick='ui_shields_setcritcolor(#31b32b)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Teal|Teal|#808080|#40404040', onClick='ui_shields_setcritcolor(#21b19b)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Blue|Blue|#808080|#40404040', onClick='ui_shields_setcritcolor(#1f87ff)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Purple|Purple|#808080|#40404040', onClick='ui_shields_setcritcolor(#a020f0)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Pink|Pink|#808080|#40404040', onClick='ui_shields_setcritcolor(#f570ce)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Black|Black|#808080|#40404040', onClick='ui_shields_setcritcolor(#191919)'}},\n                        {tag='Button', attributes={image='ui_drop', preferredWidth='40', colors='Grey|Grey|#808080|#40404040', onClick='ui_shields_setcritcolor(#aaaaaa)'}},\n                    }}\n                }},\n                {tag='Text', attributes={text='Shape'}},\n                {tag='HorizontalLayout', attributes={spacing='5'}, children={\n                    {tag='ToggleButton', attributes={onClick='ui_shieldsshape('..const.SHIELD_FRONTBACK..')', text='Fore/Aft', isOn=(currentconfig.SHIELDS.SHAPE == const.SHIELD_FRONTBACK)}},\n                    {tag='ToggleButton', attributes={onClick='ui_shieldsshape('..const.SHIELD_LEFTRIGHT..')', text='Left/Right', isOn=(currentconfig.SHIELDS.SHAPE == const.SHIELD_LEFTRIGHT)}},\n                    {tag='ToggleButton', attributes={onClick='ui_shieldsshape('..const.SHIELD_FOURWAY..')', text='4-Way', isOn=(currentconfig.SHIELDS.SHAPE == const.SHIELD_FOURWAY)}},\n                    {tag='ToggleButton', attributes={onClick='ui_shieldsshape('..const.SHIELD_SIXWAY..')', text='6-Way', isOn=(currentconfig.SHIELDS.SHAPE == const.SHIELD_SIXWAY)}},\n                }},\n                shieldsOptions\n            }}\n        end\n\n        local updateMe = {}\n        if (needsUpdate == const.NEEDSUPDATE) then\n            updateMe = {tag='Button', attributes={fontSize='22', text='Update Available', onClick='ui_setmode(SETTINGS)', flexibleWidth=1, colors = '#ffcc33|#ffffff|#808080|#606060'}}\n        end\n\n        table.insert(ui, {\n            tag='Panel', attributes={position='0 -400 -60', height='10000', width='800', rectAlignment='UpperCenter'}, children={\n                {tag='VerticalLayout', attributes={childForceExpandHeight=false, minHeight='0', spacing=5, rectAlignment='UpperCenter'}, children={\n                    {tag='HorizontalLayout', attributes={preferredHeight=80, childForceExpandWidth=false, flexibleHeight=0, spacing=20, padding='10 10 10 10'}, children={\n                        {tag='Button', attributes={fontSize='22', text='Load from Mini', onClick='ui_extract', flexibleWidth=1}},\n                        {tag='Button', attributes={fontSize='22', text='Add', onClick='ui_inject', flexibleWidth=1}},\n                        {tag='Button', attributes={fontSize='22', text='Remove', onClick='ui_clearmini', flexibleWidth=1}},\n                        updateMe,\n                        {tag='button', attributes={onClick='ui_setmode(SETTINGS)', image='ui_gear', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', preferredWidth='60', height='60', flexibleWidth=0}}\n                    }},\n                    basePanel,presetPanel,permViewPanel,permEditPanel,barsPanel,markersPanel,arcPanel,flagPanel,geometryPanel,movementPanel,shieldsPanel\n                }}\n            }\n        })\n    end\n    if (ui_mode == 'SETTINGS') then\n\n        local updateStatusDisplay = {tag='Text', attributes={id='meta_update_status', text='Update Autocheck is disabled', color='#ff3333'}}\n\n        local changeDisplay = {}\n\n        if (needsUpdate == const.UPTODATE) then\n            updateStatusDisplay = {tag='Text', attributes={id='meta_update_status', text='MiniHUD Injector is up to date', color='#33ccff'}}\n        end\n        if (needsUpdate == const.NEEDSUPDATE) then\n            updateStatusDisplay = {tag='Text', attributes={id='meta_update_status', text='A new version is available', color='#ffcc33'}}\n            local changelog = {{ tag='Text', attributes={fontSize='24', text='Change Log'} }}\n            for i,v in pairs(TRH_Version_Changes) do\n                table.insert(changelog, { tag='Text', attributes={text=string.char(8226)..' '..v} })\n            end\n            changeDisplay = {tag='VerticalLayout', attributes={spacing='5', padding='5 5 5 5', childDorceExpandHeight=false}, children=changelog}\n        end\n        if (needsUpdate == const.BADCONNECT) then\n            updateStatusDisplay = {tag='Text', attributes={id='meta_update_status', text='Error connecting to Robinomicon', color='#ff3333'}}\n        end\n\n\n\n\n        table.insert(ui, {\n            tag='Panel', attributes={position='0 -400 -60', height='10000', width='800', rectAlignment='UpperCenter'}, children={\n                {tag='VerticalLayout', attributes={childForceExpandHeight=false, minHeight='0', spacing=5, rectAlignment='UpperCenter'}, children={\n                    {tag='HorizontalLayout', attributes={preferredHeight=80, flexibleHeight=0, spacing=20, childForceExpandWidth=false, childAlignment='MiddleRight', padding='10 10 10 10'}, children={\n                        {tag='button', attributes={onClick='ui_setmode(MAIN)', image='ui_gear', colors='#ccccccff|#ffffffff|#404040ff|#808080ff', preferredWidth='60', height='80'}}\n                    }},\n                    {tag='VerticalLayout', attributes={spacing='5', flexibleHeight=0, padding='5 5 5 5', color='black'}, children={\n                        {tag='Text', attributes={alignment='UpperMiddle', fontSize='24', text='Updates'}},\n                        {tag='Text', attributes={text='Current Version: '..TRH_Version}},\n                        {tag='Text', attributes={text='Next Version: '..TRH_Version_Next}},\n                        updateStatusDisplay,\n                        {tag='HorizontalLayout', attributes={}, children={\n                            {tag='Button', attributes={onClick='ui_system_checkupdate', text='Check for Update'}},\n                            {tag='Button', attributes={colors='#ffcc33|#ffffff|#808080|#606060', onClick='ui_system_update', text='Update and Restart MiniHUD Injector', interactable = (needsUpdate == const.NEEDSUPDATE)}},\n                        }},\n                        {tag='HorizontalLayout', attributes={childForceExpandWidth=false, spacing=5}, children={\n                            {tag='Button', attributes={preferredWidth='30', preferredHeight='30', flexibleWidth=0, image=(metaconfig.UPDATECHECK and 'ui_checkon' or 'ui_checkoff'), onClick='ui_meta_toggle(UPDATECHECK)', id='tgl_settings_updatecheck'}},\n                            {tag='Text', attributes={preferredWidth='30', flexibleWidth=1, text='Auto-check for Updates'}},\n                            {tag='Button', attributes={preferredWidth='30', preferredHeight='30', flexibleWidth=0, image=(metaconfig.AUTOUPDATE and 'ui_checkon' or 'ui_checkoff'), onClick='ui_meta_toggle(AUTOUPDATE)', id='tgl_settings_autoupdate'}},\n                            {tag='Text', attributes={preferredWidth='30', flexibleWidth=1, text='Automatically Update'}},\n                        }},\n                        changeDisplay\n                    }}\n                }}\n            }\n        })\n    end\n    self.UI.setXmlTable(ui)\nend\n\nfunction checkForUpdate()\n    WebRequest.put('http://tts.robinomicon.com/version', TRH_Meta, function(res)\n        if (not(res.is_error)) then\n            local response = JSON.decode(res.text)\n            if (response.errors ~= nil) then\n                needsUpdate = const.BADCONNECT\n            elseif (response.result ~= nil) then\n                local result = response.result\n                if (result.update) then\n                    if (metaconfig.AUTOUPDATE or false) then\n                        installUpdate()\n                    elseif (needsUpdate == const.UNKNOWN) then\n                        print('[ffcc33]There is a new version of The MiniHUD Injector available[-] ('..result.current..' -> '..result.new..')')\n                        print('[0088ff]Please be sure to update[-]')\n                    end\n                    needsUpdate = const.NEEDSUPDATE\n                    TRH_Version = result.current\n                    TRH_Version_Next = result.new\n                    TRH_Version_Changes = result.changes or {}\n                else\n                    needsUpdate = const.UPTODATE\n                    TRH_Version = result.current\n                    TRH_Version_Next = result.new\n                    TRH_Version_Changes = {}\n                end\n                if (ui_mode == 'SETTINGS') then\n                    rebuildUI()\n                end\n            else\n                error('something went wrong with JSON parsing')\n                log(res.text)\n            end\n        else\n            error(res)\n        end\n    end)\nend\n\n\nfunction onLoad(save)\n\n    local data = JSON.decode(save) or {config = currentconfig, presets = {}}\n    local cfg = data.config\n    for i,v in pairs(currentconfig) do\n        if (cfg[i] == nil) then\n            cfg[i] = v\n        end\n    end\n    currentconfig = cfg\n    metaconfig = data.metaconfig or metaconfig\n    currentpresets = data.presets or {}\n    if (metaconfig.UPDATECHECK) then\n        checkForUpdate()\n    end\n\n    local assetRoot = 'https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/';\n    local assets = {\n        {name='ui_plus', url=assetRoot..'plus.png'},\n        {name='ui_gear', url=assetRoot..'gear.png'},\n        {name='ui_power', url=assetRoot..'power.png'},\n        {name='ui_close', url=assetRoot..'close.png'},\n        {name='ui_minus', url=assetRoot..'minus.png'},\n        {name='ui_save', url=assetRoot..'save.png'},\n        {name='ui_load', url=assetRoot..'load.png'},\n        {name='ui_help_outline', url=assetRoot..'help_outline.png'},\n        {name='ui_drop', url=assetRoot..'drop.png'},\n        {name='ui_share', url=assetRoot..'share.png'},\n        {name='ui_locked', url=assetRoot..'locked.png'},\n        {name='ui_unlocked', url=assetRoot..'unlocked.png'},\n        {name='ui_checkon', url=assetRoot..'checkbox_on.png'},\n        {name='ui_checkoff', url=assetRoot..'checkbox_off.png'},\n    }\n    for _,shape in pairs(arcshapes) do\n        table.insert(assets, {\n            name='arc_'..shape, url='https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/arcs/'..shape..'.png'\n        })\n    end\n    self.UI.setCustomAssets(assets)\n    Wait.frames(rebuildUI, config.REFRESH)\nend\n\nfunction onSave()\n    return JSON.encode({presets=currentpresets, config = currentconfig, metaconfig = metaconfig})\nend",
      "LuaScriptState": "{\"config\":{\"ARCS\":{\"BRACKETS\":[],\"COLOR\":\"inherit\",\"MAX\":16,\"MESH\":\"\",\"MODE\":1,\"SCALE\":1,\"SHAPE\":4,\"ZERO\":0},\"BARS\":[],\"BASE_LENGTH\":2,\"BASE_WIDTH\":2,\"FLAG\":{\"COLOR\":\"#ffffff\"},\"GEOMETRY\":{\"COLOR\":\"inherit\",\"MATERIAL\":0,\"MESH\":\"\",\"NORMAL\":\"\",\"TEXTURE\":\"\"},\"LOCK_FLAG\":false,\"LOCK_GEOMETRY\":false,\"META\":{\"AUTOUPDATE\":false,\"UPDATECHECK\":true},\"MODULE_ARC\":false,\"MODULE_BARS\":false,\"MODULE_FLAG\":false,\"MODULE_GEOMETRY\":false,\"MODULE_MARKERS\":false,\"MODULE_MOVEMENT\":false,\"MODULE_SHIELDS\":false,\"MOVEMENT\":{\"COLOR\":\"inherit\",\"DEFINITIONS\":[[\"Standstill\",\"https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/ui/move/standstill.png\",0,0,0,2,0,\"#0088ff\"]],\"LANDSHOW\":true,\"LANDTEST\":false,\"MODE\":1,\"ORIGIN\":\"EDGE\",\"SEGMENTS\":[[0,[]]],\"SPEEDDISTANCE\":1,\"SPEEDMAX\":4,\"SPEEDMIN\":0,\"TURNMAX\":3,\"TURNNOTCH\":22.5,\"UIHEIGHT\":0.25},\"OVERHEAD_HEIGHT\":2,\"OVERHEAD_OFFSET\":0,\"OVERHEAD_ORIENT\":\"VERTICAL\",\"OVERHEAD_WIDTH\":3,\"PERMEDIT\":10,\"PERMVIEW\":524287,\"REFRESH\":3,\"SHIELDS\":{\"AUTOMODE\":true,\"COLOR\":\"#1f87ff\",\"CRITCOLOR\":\"#da1918\",\"CRITICAL\":[1,1,1,1,1,1],\"CURRENT\":[6,6,6,6,6,6],\"LIMITMODE\":1,\"MAXIMUM\":[6,6,6,6,6,6],\"MINIMUM\":[0,0,0,0,0,0],\"SHAPE\":1,\"UIHEIGHT\":0.25},\"UI_SCALE\":1},\"metaconfig\":{\"AUTOUPDATE\":false,\"UPDATECHECK\":true},\"presets\":[]}",
      "GUID": "d689bc",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          }
        }
      ]
    }
  ],
  "DecalPallet": [],
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "VersionNumber": "v12.2.3"
}